@using System.Configuration;

@using System.Configuration;
@using SixStorage.AutoInvoice.WebApi.Shared.DTOs.AutoInvoice;

@model InvoicePdfDto;

@{
    // @using Storagebase.Data.Models;
    // @using Storagebase.Data.Services;

    ViewBag.Title = "Invoice Pdf";
    Layout = "";

    var pdfHide = Model.hideandshow; //ViewData["hideandshow"];
    var exportHide = Model.exportHideandshow; //ViewData["exportHideandshow"];
    var exportdisplay = exportHide != "0" ? "display:none" : "display:block";
    var pdfdisplay = pdfHide != "0" ? "display:none" : "display:block";

    // var objConfig = new Storagebase.Data.Services.ConfigManage();
    var objOptionalFields = Model.optionalFields;//objConfig.GetOptionalfields("unitdetails");
    bool sizeRoundUp = objOptionalFields.Any(x => x.UserOption == "EnableSqftRoundUp");

    ClientOverallConfig objOverallConfigData = Model.ConfigurationData;
    Guid loginclientId = Model.ClientDetails.Id;//Storagebase.Data.Services.Common.CommonHelper.sessionObjects.LoginClientId;

    var ukcountryDatetext = "Date / Tax Point"; //CHECK - System.Configuration.ConfigurationManager.AppSettings["UKDateTaxPoint"];
    var uscountryDatetext = "Date"; //CHECK - System.Configuration.ConfigurationManager.AppSettings["USDateTaxPoint"];

    var uscountryTaxText = objOverallConfigData.AccountSettingsTable4.TextForTax;
    var ukcountryTaxText = "VAT"; //CHECK - System.Configuration.ConfigurationManager.AppSettings["UKVat"];

    bool IsEnabledMultipleTax = objOverallConfigData.clientApplicationmenuconfig.IsEnabledMultipleTax;
    string DisplayTax = objOverallConfigData.clientApplicationmenuconfig.DisplayTax ? "1" : "0";
    string DisplayBankDetails = objOverallConfigData.clientApplicationmenuconfig.DisplayBankDetails ? "1" : "0";
    string PrintLogoPath = objOverallConfigData.clientAppAndDocumentConfig.DocumentLogoPath;
    var InvoiceTaxOrVat = objOverallConfigData.AccountSettingsTable4.TextForTax;
    var currencySymbol = Model.CultureCurrencySymbol;

    var ClientCulture = Model.CurrentCulture; //System.Threading.Thread.CurrentThread.CurrentCulture;
    bool clientName = false;
    bool iptAvailable = false; decimal iptAmt = 0;
    string iptMessage = string.Empty;
    var documentConfig = Model.DocumentConfig;
    var BuildingName = Model.Building;
    string topAddress = documentConfig.InvoiceTopAddress;
    
    if (!string.IsNullOrEmpty(topAddress))
    {
        if (ClientCulture.ToString().ToUpper() == "EN-US")
        {
            clientName = true;
        }
        topAddress = topAddress.Replace(",", "<br />");
    }

    string[] compaddress = new string[10];
    compaddress = documentConfig.InvoiceTopAddress.Split(',');
    string baddress1 = "";
    string baddress2 = "";
    string bstate = "";
    string bcity = "";
    string bcountry = "";

    if (!string.IsNullOrEmpty(documentConfig.InvoiceTopAddress))
    {
        if (compaddress.Count() > 0)
        {
            for (int i = 0; i < compaddress.Length; i++)
            {
                if (i == 0)
                {
                    baddress1 = compaddress[0];
                }
                if (i == 1)
                {
                    baddress2 = compaddress[1];
                }
                if (i == 2)
                {
                    bcity = compaddress[2];
                }
                if (i == 3)
                {
                    bstate = compaddress[3];
                }
                if (i == 4)
                {
                    bcountry = compaddress[4];
                }
            }
        }
    }

    baddress1 = baddress1.Trim();
    baddress2 = baddress2.Trim();

    string remitAddress = documentConfig.InvoicePermitPayAddress;
    string[] remitPayAddress = remitAddress.Split(',');
    string remitaddress1 = "";
    string remitaddress2 = "";
    string remitcity = "";
    string remitstate = "";
    string remitcountry = "";

    if (!string.IsNullOrEmpty(remitAddress))
    {
        if (remitPayAddress.Count() > 0)
        {
            for (int i = 0; i < remitPayAddress.Length; i++)
            {
                if (i == 0)
                {
                    remitaddress1 = remitPayAddress[0];
                }
                if (i == 1)
                {
                    remitaddress2 = remitPayAddress[1];
                }
                if (i == 2)
                {
                    remitcity = remitPayAddress[2];
                }
                if (i == 3)
                {
                    remitstate = remitPayAddress[3];
                }
                if (i == 4)
                {
                    remitcountry = remitPayAddress[4];
                }
            }
        }
        //remitAddress = remitAddress.Replace(",", "<br />");
    }

    string DISPLAYUNITBASEDON = Model.UnitStorageTypeInfo != null ? 
        Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat : null;

    //var TaxOrVat = "VAT";
    //var DateOrTaxPoint = "Date";

    var DateOrTaxPoint = uscountryDatetext;
    var TaxOrVat = uscountryTaxText;
    var clientcountry = ViewData["Clientcountry"] as string;
    Guid invoiceGuid = Model.InvoiceIdGuid;
    string EnableInvoiceRoundoffValue = objOverallConfigData.clientAppAndDocumentConfig.EnableInvoiceRoundoffValue ? "1" : "0";
    EnableInvoiceRoundoffValue = Model.RoundOffEnabled ? "1" : "0";
    var InvoiceRoundoffRange01to04 = objOverallConfigData.clientAppAndDocumentConfig.InvoiceRoundoffRange01to04;
    var InvoiceRoundoffRange05to09 = objOverallConfigData.clientAppAndDocumentConfig.InvoiceRoundoffRange05to09;
    decimal SubUnpaidTotal = 0;
    decimal PastDue = 0;
    string taxpercentage = Model.InvTaxPercentage.ToString();
    
    //added by shiva for client CB Lockers changes
    var Cblockersselfstorage = 
        (Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867" || 
        Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF") ? "1" : "0";
    
    var columbiaMovers = 
        (Convert.ToString(loginclientId).ToUpper() == "64B91811-BEC6-48EB-A449-09BE48034C1E") ? "1" : "0";
    
    bool isCblockersselfstorage = (Cblockersselfstorage == "1");

    //Storagebase.Data.Services.ConfigManage objConfigManage = new Storagebase.Data.Services.ConfigManage();

    // var TranslationKeywordSetup = objConfigManage.GetCustomizedTextInfo("AD_CUSDOC");
    string insuranceTextDisplay = Model.GetDictionaryItem("Cont_insurance");

    var displayPastDueTop = Model.GetDictionaryVisibility("DisplayPastDueTop");
    isCblockersselfstorage = Model.GetDictionaryVisibility("SlmInv_TotalTax");

    bool IsColumbiaMovers = Model.GetDictionaryVisibility("SlmInv_DisplayIPTAlongWithRentalTax");

    //Assigning Top Business address is from Location based
    //Comments updated by RLN

    if (objOverallConfigData.AccountSettingsTable4.DisplayLocBasedAddress)
    {
        if (Model.UnitLocationInfo != null)
        {
            baddress1 = Model.UnitLocationInfo.LocAddress;
            baddress2 = Model.UnitLocationInfo.Address2;
            bcity = Model.UnitLocationInfo.City;

            if (objOverallConfigData.AccountSettingsTable4.IsActivateNewUI)
            {
                bstate = Model.UnitLocationInfo.LocState ?? string.Empty;
            }
            else
            {
                bstate = Model.UnitLocationInfo.Location1 ?? string.Empty;
            }

            //bcountry = Model.UnitLocationInfo.Country == null ? string.Empty : Model.UnitLocationInfo.Country.Country1;
            bcountry = Model.UnitLocationInfo.CountryName ?? string.Empty;
            
            documentConfig.InvoiceTopZipcode = Model.UnitLocationInfo.Zipcode;
        }
    }

    var invoiceCancelled = Model.InvoiceDetail.IsInvoiceCancelled;
    
    var watermarkText = Model.InvoiceDetail.IsInvoiceCancelled ? Model.GetDictionaryItem("InvCancelledText") : "";
    
    watermarkText = Model.InvoiceDetail.deleted ? Model.GetDictionaryItem("InvVoidedText") : watermarkText;
    
    decimal totalTranferedAmt = 0;
    var isTrasferred = false;
    string transferredFromUnitNumber = "";
    var multipleTaxHeaderCount = 0;
    var multipleTaxHeaderDet = new List<TaxMaster>();

    if (IsEnabledMultipleTax && Model.InvoiceAppliedTaxDetails != null)
    {
        var taxHeaderList = Model.InvoiceAppliedTaxDetails.
            Select(xx =>
            new
            {
                Tax1 = xx.TaxPercentage,
                TaxName = xx.TaxName,
                Id = xx.TaxMasterId
            }).Distinct().ToList();

        multipleTaxHeaderDet = taxHeaderList.Select(xx => new TaxMaster
        {
            Tax1 = xx.Tax1,
            TaxName = xx.TaxName,
            Id = xx.Id
        }).OrderBy(xx => xx.TaxName).ToList();

        multipleTaxHeaderCount = multipleTaxHeaderDet.Count();
    }

    ///changed to TotalInvAmt instead of InvoiceTotal
    var roundofflabelText = Model.GetDictionaryItem("RoundOffText");
    roundofflabelText = string.IsNullOrEmpty(roundofflabelText) ? "Round Off" : roundofflabelText;
    var totalWithroundofflabelText = Model.GetDictionaryItem("TotalWithoutRoundOffText");
    totalWithroundofflabelText = string.IsNullOrEmpty(totalWithroundofflabelText) ? "Sub Total" : totalWithroundofflabelText;


    var isBusinessUser = Model.IsBussinessUser;
    string locationName = string.Empty;
    string FacilityTaxId = string.Empty;

    if (Model.UnitLocationInfo != null)
    {
        locationName = Model.UnitLocationInfo.Location1;
        FacilityTaxId = Model.UnitLocationInfo.FacilityTaxId;
    }
    
    string appEnvironment = "LIVE"; //CHECK
}

@if (!objOverallConfigData.AccountSettingsTable4.IsActivateNewUI)
{
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" />
}

<div id="dvInvoicePdf" style="padding:10px;">
    @if (invoiceCancelled)
    {
        <div id="Watermarkbackground">
            <p id="Watermarkbackground-bg-text">@Html.Raw(watermarkText)</p>
        </div>
        <style>
            #Watermarkbackground {
                position: absolute;
                z-index: -1;
                background: transparent;
                display: block;
                min-height: 50%;
                min-width: 50%;
                color: yellow;
                top: 230px;
                right: 307px;
            }

            #Watermarkbackground-bg-text {
                color: #ffdddd;
                font-size: 100px;
                transform: rotate(300deg);
                -webkit-transform: rotate(298deg);
            }
        </style>
    }


    <style>
        div, table {
            font-family: Arial;
        }

            table thead tr th, table tbody tr td {
                padding: 3px 5px 0px 5px;
                /*border: 1px solid #ddd; */
            }

        #Invoice tbody tr td {
            padding: 8px;
            /*border: 1px solid #ddd;*/
            text-align: center;
        }

        table {
            width: 100%;
        }

        .row {
            /*width: 100%;*/
            clear: both;
            margin-bottom: 20px;
        }

        .col-md-4 {
            width: 33%;
            float: left;
        }

        .graybox {
            background-color: #ddd !important;
            padding: 5px !important;
            /*border: 1px solid #666 !important;*/
            border-radius: 5px;
        }

        fieldset {
            border: none;
        }

            fieldset legend {
                border: none;
                font-weight: bold;
                font-size: 16px;
                margin-bottom: 50px !important;
            }

        .alignCenter {
            text-align: center !important;
        }

        .alignRight {
            text-align: right !important;
        }

        body {
            counter-reset: Serial; /* Set the Serial counter to 0 */
        }

        tr td.alignCenter:first-child:before {
            counter-increment: Serial; /* Increment the Serial counter */
            content: counter(Serial); /* Display the counter */
        }


        .alignCenter {
            text-align: center !important;
        }

        .alignRight {
            text-align: right !important;
        }

        .btn-u {
            border: 0;
            color: #fff;
            font-size: 14px;
            cursor: pointer;
            font-weight: 400;
            padding: 6px 13px;
            position: relative;
            background: #72c02c;
            white-space: nowrap;
            display: inline-block;
            text-decoration: none;
        }

        table tbody tr td span {
            font-size: 13px !important;
            /*line-height: 1.5;*/
        }

        table tbody tr td {
            font-size: 15px !important;
        }

        table tbody tr th {
            font-size: 14px !important;
            text-align: center !important;
            font-weight: bold
        }

            table tbody tr th .downtxt {
                display: block;
                padding-top: 5px;
                font-size: 11px !important
            }

        #dvInvoicePdf {
            max-width: 1000px;
            margin-left: auto;
            margin-right: auto;
            display: block;
        }

        #invoice-tablegrid tbody tr td {
            font-size: 13px !important;
        }

        .gridspan4 tbody tr td {
            font-size: 15px !important;
            padding-left: 0px;
        }

        .gridspan4 tbody tr th {
            font-size: 16px !important;
        }

        .gridspan4 tbody tr td span {
            font-size: 15px !important;
        }

        #ftr-txt td span {
            font-size: 13px !important;
        }

        .gridspan5 tbody tr td {
            font-size: 13px !important;
        }

        .acgridspan4 tbody tr td {
            padding: 0px;
        }

        #remove-brk br {
            display: none !important;
        }

        #printbtn {
            float: right;
            color: #fff;
            background-color: #5cb85c;
            border-color: #4cae4c;
        }

        #btnPDFExportReportSearch {
            float: right;
            margin-right: 15px;
        }

        table {
            letter-spacing: 0.5px !important;
        }

        td#imgtd {
            padding: 0px !important;
            display: block;
        }

        @@media print {
            img#imglogo {
                width: 50% !important;
                height: 50% !important;
            }

            th#BankdetailsTd {
                white-space: nowrap;
            }

            table.gridspan4 {
                width: 100%;
            }

            table.acgridspan4 {
                width: 100%;
            }

            td#ibanTd {
                white-space: nowrap;
            }

            th#remitpayTh {
                white-space: nowrap;
            }

            td.removewhite {
                white-space: nowrap;
            }

            html, body {
                height: auto;
                display: block;
            }

            tr#remitTr {
                margin-left: 50px;
                display: block;
            }

            tr#paymentTr {
                margin-left: 52px;
                display: block;
            }

            tr#remitTd {
                width: 44% !important;
            }
        }

        /*tr {
                page-break-inside: avoid !important;
            }*/
        thead {
            display: table-header-group;
        }

        tfoot {
            display: table-row-group;
        }

        tr {
            page-break-inside: avoid;
        }

        .salesInvdetailsRight-td {
            width: 125px;
            max-width: 125px;
            word-break: break-all;
        }
    </style>
    @*added by shiva for client document store and park ,bilting farm komora they have own font-size*@
    @if (Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB" || 
    Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB" || 
    Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
    {
        <style>
            #leasegridspan tbody tr td, #leasegridspan tbody tr td span {
                font-size: 12px !important;
            }
        </style>
    }

    @{

        var newInvoiceModel = Model.newInvoicePdfModel;
        var totalDue = Model.InvoiceBalance + Model.lateFeeAmount;
        var Latefee = Model.lateFeeAmount;
        var invoiceDetail = Model.InvoiceDetail;
        var insurance = Model.Insurance;

        if (invoiceDetail != null && insurance != null)
        {
            invoiceDetail.InsuranceCharges = insurance.InsuranceAmount;

        }
        decimal iptAmnt = 0, iptPercentage = 0;
        iptAmnt = (insurance != null) ? Convert.ToDecimal(insurance.IPTAmount) : 0;
        var invoiceTotalAmnt = "0.00";
        if (invoiceDetail.TotalInvAmt != null)
        {
            invoiceTotalAmnt = invoiceDetail.TotalInvAmt.ToString();
        }
        else
        {
            invoiceTotalAmnt = "0.00";
        }
        decimal adjustamount = Convert.ToDecimal(invoiceDetail.OnAccountDebit);//Added by Desala on 11/12/2017
        string invoiceCreatedDate = invoiceDetail.InvoiceDate.ToShortDateString();
        string InvoiceFromDate = invoiceDetail.InvPeriodFrom != null ? Convert.ToDateTime(invoiceDetail.InvPeriodFrom).ToShortDateString() : "-";
        string invoiceToDate = invoiceDetail.InvPeriodTo != null ? Convert.ToDateTime(invoiceDetail.InvPeriodTo).ToShortDateString() : "-";
        string invoiceDueDate = invoiceDetail.InvoiceDueDate != null ? Convert.ToDateTime(invoiceDetail.InvoiceDueDate).ToShortDateString() : "-";
        string PaymentPeriod = (InvoiceFromDate == "-" && invoiceToDate == "-") ? "-" : InvoiceFromDate + " to " + invoiceToDate;

        var estimatedTerminationDate = Model.EstimatedTerminationDate != null ? 
            Convert.ToDateTime(Model.EstimatedTerminationDate).ToShortDateString() : "-";

        string CustomerLastName = Model.CustomerDetails?.LastName ?? string.Empty;
        string CustomerAddress = Model.CustomerDetails?.AddressLine1 ?? string.Empty;
        string CustomerZip = Model.CustomerDetails?.Zipcode ?? string.Empty;

        string[] addressLine = new string[10];
        string addressline3 = Model.CustomerDetails?.AddressLine1 ?? string.Empty;
        string[] CustAddress = CustomerAddress.Split(',');//Added by Desala on 10/12/2017
        string address = string.Empty;
        string city = Model.CustomerDetails?.City ?? string.Empty;
        string state = Model.CustomerDetails?.State ?? string.Empty;

        try
        {
            if (!string.IsNullOrEmpty(CustomerAddress))
            {
                //addressLine = CustomerAddress.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
                addressLine = CustomerAddress.Split(new[] { '\r', '\n' });
                for (int i = 0; i < addressLine.Length; i++)
                {
                    if (i == 0 && string.IsNullOrWhiteSpace(address))
                    {
                        address = addressLine[0];
                    }
                    if (i == 1 && string.IsNullOrWhiteSpace(city))
                    {
                        city = addressLine[1];
                    }
                    if (i == 2 && string.IsNullOrWhiteSpace(state))
                    {
                        state = addressLine[2];
                    }
                }

            }
        }
        catch
        {
            addressLine = CustomerAddress.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);
            address = Convert.ToString(addressLine.ToArray());
            // address = addressLine.Replace(",", "<br />");
        }

        var bankDetails = Model.bankDetails;
        var AccNum = "-";
        var SortCode = "-";

        if (Model.bankDetails != null)
        {
            AccNum = bankDetails.AccountNo;
            SortCode = bankDetails.SortCode;
        }

        decimal individualTotal = 0;
        decimal individualSubTotal = 0;
        decimal individulaDiscountTotal = 0;
        decimal individualTaxTotal = 0;
        string BillingCycle = string.IsNullOrEmpty(Model.BillingCycle) ? "" : Model.BillingCycle;

        if (InvoiceFromDate == "-" && invoiceToDate == "-")
        {
            BillingCycle = "-";
        }

        if (Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596")
        {
            if (BillingCycle == "Monthly")
            {
                BillingCycle = "месечно";
            }
            else if (BillingCycle == "Weekly")
            {
                BillingCycle = "седмично";
            }
            else if (BillingCycle == "Daily")
            {
                BillingCycle = "ежедневно";
            }
            else if (BillingCycle == "Quarterly")
            {
                BillingCycle = "тримесечен";
            }
            else if (BillingCycle == "Annually")
            {
                BillingCycle = "ежегодно";
            }
            else if (BillingCycle == "Semi-Annually")
            {
                BillingCycle = "Полугодишно";
            }
        }

        var displayBusinessCompanyName = "display:none";

        if (Model.IsBussinessUser == true)
        {
            displayBusinessCompanyName = "display:block";
        }
    }

    @*<p>Please review your Invoice Detail. </p>*@
    <div>
        <table style="margin-left:auto;margin-right:auto;">
            <tbody>
                <tr>
                    <td style="width:10px;">
                        @if (Convert.ToString(loginclientId).ToLower() == "0c3bdd2b-00e2-4ba5-8253-146a2dc9978d")
                        {
                            <table style="margin-top:40px;">
                                <tr>
                                    <td>
                                        @if (Model.GetDictionaryVisibleStatus("sl_BusinessName"))
                                        {
                                            <span> @Html.Raw(documentConfig.InvoiceTopCompanyName) <br /> </span>
                                        }

                                        @*@Html.Raw(topAddress)*@
                                        @{
                                            var isaddress2visible = Model.GetDictionaryVisibleStatus("sl_AddresssLine2");
                                        }
                                        @if (Model.GetDictionaryVisibleStatus("sl_AddresssLine1") && !string.IsNullOrEmpty(baddress1))
                                        {
                                            <span>
                                                @Html.Raw(baddress1), @if (string.IsNullOrEmpty(baddress2) || isaddress2visible == false)
                                                {<br />}
                                            </span>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus("sl_AddresssLine2") && !string.IsNullOrEmpty(baddress2))
                                        {
                                            <br /><span>  @Html.Raw(baddress2),<br /> </span>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus("sl_City") && !string.IsNullOrEmpty(bcity))
                                        {
                                            <span> @Html.Raw(bcity), </span>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus("sl_State") && !string.IsNullOrEmpty(bstate))
                                        {
                                            <span> @Html.Raw(bstate)</span>
                                        }

                                        @if (Model.GetDictionaryVisibleStatus("sl_ZipCode") && !string.IsNullOrEmpty(documentConfig.InvoiceTopZipcode))
                                        {
                                            <span>  @documentConfig.InvoiceTopZipcode   </span>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus("sl_Country") && !string.IsNullOrEmpty(bcountry))
                                        {
                                            <br /> <span> @Html.Raw(bcountry)  </span>
                                        }

                                    </td>
                                </tr>
                                <tr>
                                    @if (Convert.ToString(loginclientId).ToUpper() == "C7D6EC8C-CAB1-42F8-B127-FC123A2560DB")
                                    {
                                        <td>
                                            @if (Model.GetDictionaryVisibleStatus( "sl_MobileNumber") && !string.IsNullOrEmpty(documentConfig.InvoiceTopMobile))
                                            {
                                                <span>  @documentConfig.InvoiceTopMobile</span><br />
                                            }

                                            @if (Model.GetDictionaryVisibleStatus( "sl_E-Mailaddress") && !string.IsNullOrEmpty(documentConfig.InvioceTopEmail))
                                            {
                                                <span>@Html.Raw(documentConfig.InvioceTopEmail)</span><br />
                                            }
                                        </td>
                                    }
                                    else
                                    {
                                        <td style="padding-top:10px;">
                                            @if (Model.GetDictionaryVisibleStatus( "sl_MobileNumber") && !string.IsNullOrEmpty(documentConfig.InvoiceTopMobile))
                                            {
                                                <span>  @documentConfig.InvoiceTopMobile</span><br />
                                            }

                                            @if (Model.GetDictionaryVisibleStatus( "sl_E-Mailaddress") && !string.IsNullOrEmpty(documentConfig.InvioceTopEmail))
                                            {
                                                <span>@Html.Raw(documentConfig.InvioceTopEmail)</span><br />
                                            }
                                        </td>
                                    }
                                </tr>
                            </table>
                        }
                        else
                        {
                            <table>
                                <tr>
                                    @if ((Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867" || Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF"))
                                    {
                                        <td style="text-align:left;padding-top:4px !important;display:block;" valign="top" id="imgtd">
                                            @*added by shiva for cb lockers changes*@
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayLogo"))
                                            {
                                                <img src="@PrintLogoPath" style="width:250px;height:auto;" id="imglogo" alt="6Storage.Com">
                                            }

                                        </td>
                                    }
                                </tr>
                                @if (Model.GetDictionaryVisibleStatus( "Display-FacilityAddress"))
                                {
                                    <tr>
                                        <td>
                                            <span style="text-align:left;font-weight:bold;text-decoration:underline"><b>@Html.Raw(Model.GetDictionaryItem( "Display-FacilityAddress")) :</b></span>
                                        </td>
                                    </tr>
                                }
                                @if ((Convert.ToString(loginclientId).ToUpper() != "273470E5-2BB7-4667-907A-3E05B2A21867" || Convert.ToString(loginclientId).ToUpper() != "80BB9F0E-8706-435A-BE03-756E51AD9ADF"))
                                {

                                    <tr>
                                        <td>
                                            @*Added by shiva for client document store and park and northernmontana,komora they want to  remove the ","(18-03-2019)*@
                                            @{
                                                var comma = (Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD"
                                                    || Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB"
                                                    || Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F"
                                                    || Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8"
                                                    || Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596"
                                                    || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB"
                                                    || Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88"
                                                    || Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA") ? "" : ",";
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "sl_BusinessName"))
                                            {
                                                <span> @Html.Raw(documentConfig.InvoiceTopCompanyName) <br /> </span>
                                            }

                                            @*@Html.Raw(topAddress)*@
                                            @{
                                                var isaddress2visible = Model.GetDictionaryVisibleStatus( "sl_AddresssLine2");
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "sl_AddresssLine1") && !string.IsNullOrEmpty(baddress1))
                                            {
                                                <span>@Html.Raw(baddress1)@comma </span>

                                                if (string.IsNullOrEmpty(baddress2) || isaddress2visible == false)
                                                {
                                                    <br />}



                                            }

                                            @if (Model.GetDictionaryVisibleStatus( "sl_AddresssLine2") && !string.IsNullOrEmpty(baddress2))
                                            {
                                                <br />
                                                <span>
                                                    @Html.Raw(baddress2)@comma
                                                    @if (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F")
                                                    {

                                                    }
                                                    else
                                                    {
                                                        <br />
                                                    }
                                                </span>

                                            }
                                            @*changed by shiva for client M and Z they want to space in address2(18-03-2018)*@
                                            @if (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8" || 
                                            Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                            {
                                                <br />
                                            }

                                            @if (Model.GetDictionaryVisibleStatus( "sl_City") && 
                                                !string.IsNullOrEmpty(bcity))
                                            {
                                                //changes by shiva for cilent northernmontanan and morespace storage want to state nextline
                                                if (Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD"
                                                    || Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA" 
                                                    || Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F")
                                                {
                                                    <span> @Html.Raw(bcity)<br /> </span>
                                                }
                                                //changes by siva for client M and z properties want to state nextline
                                                else if (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8" 
                                                    || Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8"
                                                    || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB")
                                                {
                                                    <span> @Html.Raw(bcity)<br /> </span>
                                                }
                                                else if (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                                                {
                                                    <span> @Html.Raw(bcity) </span>
                                                }
                                                else
                                                {
                                                    <span> @Html.Raw(bcity), </span>
                                                }
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "sl_State") && !string.IsNullOrEmpty(bstate))
                                            {
                                                <span> @Html.Raw(bstate)</span>
                                            }

                                            @if (Model.GetDictionaryVisibleStatus( "sl_ZipCode") && !string.IsNullOrEmpty(documentConfig.InvoiceTopZipcode))
                                            {
                                                <span>  @documentConfig.InvoiceTopZipcode   </span>
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "sl_Country") && !string.IsNullOrEmpty(bcountry))
                                            {
                                                <br />
                                                <span> @Html.Raw(bcountry)  </span>
                                            }
                                            @if (Convert.ToString(loginclientId).ToLower() == "ceaa7c40-bfec-40df-831f-23107328dcee")
                                            {
                                                <br /><span>CIF: B93673432</span>
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "sl_taxorvatcheck") && !string.IsNullOrEmpty(InvoiceTaxOrVat))
                                            {
                                                if (objOverallConfigData.AccountSettingsTable4.DisplayLocBasedAddress)
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "sl_Displayforbusinessuser"))
                                                    {

                                                        if (isBusinessUser == true)
                                                        {
                                                            if (FacilityTaxId != "")
                                                            {
                                                                <br> <span>Tax ID @FacilityTaxId</span>
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {

                                                        if (FacilityTaxId != "")
                                                        {
                                                            <br> <span>Tax ID @FacilityTaxId</span>
                                                        }

                                                    }
                                                }
                                                else
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "sl_Displayforbusinessuser"))
                                                    {

                                                        if (isBusinessUser == true)
                                                        {
                                                            <br />
                                                            <span>@Html.Raw(InvoiceTaxOrVat)</span>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <br />
                                                        <span>@Html.Raw(InvoiceTaxOrVat)</span>
                                                    }

                                                }

                                            }




                                        </td>
                                    </tr>
                                    <tr>
                                        @*changed by shiva for client documnet store and park want to spacs in mobilenumber and email*@
                                        @{
                                            var space = (Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB") ? "padding-top:20px" : "padding-top:10px";
                                        }
                                        @if (Convert.ToString(loginclientId).ToUpper() == "C7D6EC8C-CAB1-42F8-B127-FC123A2560DB")
                                        {
                                            <td style="padding-top:0px !important;">
                                                @if (Model.GetDictionaryVisibleStatus( "sl_MobileNumber") && !string.IsNullOrEmpty(documentConfig.InvoiceTopMobile))
                                                {
                                                    <span>  @documentConfig.InvoiceTopMobile</span><br />
                                                }

                                                @if (Model.GetDictionaryVisibleStatus( "sl_E-Mailaddress") && !string.IsNullOrEmpty(documentConfig.InvioceTopEmail))
                                                {
                                                    <span>@Html.Raw(documentConfig.InvioceTopEmail)</span><br />
                                                }
                                            </td>
                                        }
                                        else
                                        {
                                            <td style="@space;">
                                                @if (Model.GetDictionaryVisibleStatus( "sl_MobileNumber") && !string.IsNullOrEmpty(documentConfig.InvoiceTopMobile))
                                                {
                                                    <span>  @documentConfig.InvoiceTopMobile</span><br />
                                                }

                                                @if (Model.GetDictionaryVisibleStatus( "sl_E-Mailaddress") && !string.IsNullOrEmpty(documentConfig.InvioceTopEmail))
                                                {
                                                    <span>@Html.Raw(documentConfig.InvioceTopEmail)</span><br />
                                                }
                                                @*added by shiva for client document Topbox storage*@
                                                @if (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F")
                                                {
                                                    <span>www.topboxstorage.com.au</span>
                                                }

                                            </td>
                                        }
                                    </tr>
                                    if (Convert.ToString(loginclientId).ToLower() == "30a14914-8b60-4b55-a08d-9b94cdce6e8e")
                                    {
                                        <tr>
                                            <td>
                                                <span>GST: 858525611RT0001</span>
                                            </td>
                                        </tr>
                                    }
                                }
                            </table>
                        }
                    </td>
                    @if ((Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867" || Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF"))
                    {
                        if (Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867" || Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF")
                        {

                            <td style="line-height: 25px;font-size:12px!important">
                                บริษัท ซีบี ล็อคเก้อร์ส จํากัด <br />
                                CB Lockers Ltd.1249/61 Charoen Krug Rd,Gems Tower,8th FI,Bangrak,Bangkok 10500 Tel:02-267-4620/1<br />
                                Branch 001:399 Sukhumvit Rd,Interchange 21 Bldg,Unit B1-D,Wattana,Bangkok 10110 Tel:02-258-5853/4
                            </td>
                        }
                        <td style="text-align:right !important;">
                            @if (Model.GetDictionaryVisibleStatus( "sl_BusinessName"))
                            {
                                <span> @Html.Raw(documentConfig.InvoiceTopCompanyName) <br /> </span>
                            }

                            @*@Html.Raw(topAddress)*@
                            @{
                                var isaddress2visible = Model.GetDictionaryVisibleStatus( "sl_AddresssLine2");
                            }
                            @if (Model.GetDictionaryVisibleStatus( "sl_AddresssLine1") && !string.IsNullOrEmpty(baddress1))
                            {
                                <span>
                                    @Html.Raw(baddress1), @if (string.IsNullOrEmpty(baddress2) || isaddress2visible == false)
                                    {<br />}
                                </span>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "sl_AddresssLine2") && !string.IsNullOrEmpty(baddress2))
                            {
                                <br /><span>  @Html.Raw(baddress2),<br /> </span>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "sl_City") && !string.IsNullOrEmpty(bcity))
                            {
                                <span> @Html.Raw(bcity), </span>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "sl_State") && !string.IsNullOrEmpty(bstate))
                            {
                                <span> @Html.Raw(bstate)</span>
                            }

                            @if (Model.GetDictionaryVisibleStatus( "sl_ZipCode") && !string.IsNullOrEmpty(documentConfig.InvoiceTopZipcode))
                            {
                                <span>  @documentConfig.InvoiceTopZipcode   </span>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "sl_Country") && !string.IsNullOrEmpty(bcountry))
                            {
                                <br /> <span> @Html.Raw(bcountry)  </span> <br />
                            }
                            @if (Model.GetDictionaryVisibleStatus( "sl_MobileNumber") && !string.IsNullOrEmpty(documentConfig.InvoiceTopMobile))
                            {
                                <span>  @documentConfig.InvoiceTopMobile</span><br />
                            }

                            @if (Model.GetDictionaryVisibleStatus( "sl_E-Mailaddress") && !string.IsNullOrEmpty(documentConfig.InvioceTopEmail))
                            {
                                <span>@Html.Raw(documentConfig.InvioceTopEmail)</span><br />
                            }
                        </td>
                    }

                    <td style="text-align:right;padding-top:4px !important;display:block;" valign="top" id="imgtd">
                        @*<img src="~/images/logo.png" alt="6Storage.Com">*@
                        @{
                            var styleImg = "width:360px;height:90px;vertical-align:top;";
                            //added by shiva for clientdocument komora they want to img logo size less
                            var imglogosize = (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8") ? "width:200px;height:86px" : "width:250px;height:auto";
                            if (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                            {
                                imglogosize = "width:360px;height:90px;vertical-align:top;";
                                if (documentConfig.InvoiceTopCompanyName.Contains("Kraak"))
                                {
                                    imglogosize = "width:auto;height:auto;vertical-align:top;";
                                }
                                if (documentConfig.InvoiceTopCompanyName.Contains("lake"))
                                {
                                    imglogosize = "width:270px;height:90px;vertical-align:top;";
                                }

                            }
                            if (Convert.ToString(loginclientId).ToUpper() == "5BC3566F-5AB2-478B-A930-495185515CA3")
                            {
                                imglogosize = "width:200px;height:auto;vertical-align:top;";
                            }
                        }

                        @if (Model.GetDictionaryVisibleStatus( "DisplayLogo"))
                        {
                            if ((Convert.ToString(loginclientId).ToLower() != "c7d6ec8c-cab1-42f8-b127-fc123a2560db" && Convert.ToString(loginclientId).ToUpper() != "273470E5-2BB7-4667-907A-3E05B2A21867" && Convert.ToString(loginclientId).ToUpper() != "80BB9F0E-8706-435A-BE03-756E51AD9ADF"))
                            {
                                <img src="@PrintLogoPath" style="@imglogosize;" id="imglogo" alt="6Storage.Com">
                            }
                            if (Convert.ToString(loginclientId).ToLower() == "c7d6ec8c-cab1-42f8-b127-fc123a2560db")
                            {
                                <img src="@PrintLogoPath" style="width:470px;height:auto;" id="imglogo" alt="6Storage.Com">
                            }
                        }

                    </td>
                </tr>
                @*added by shiva for client document topbox storage  they want to tax invoice in top place *@
                @if (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F")
                {
                    if (Model.InvoiceDetail.Category == "INVOICE-CREDITNOTE")
                    {
                        <tr>
                            <td style="position:relative;top:-15px;">
                                <span style="font-size:11px;font-family:arial;font-weight:normal;">
                                </span>
                            </td>
                            <td style="position:relative;top:-40px;text-align:center;">
                                <span style="font-size:35px!important;font-family:arial;">CREDIT NOTE INVOICE</span>

                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td style="position:relative;top:-5px;">
                                <span style="font-size:11px;font-family:arial;font-weight:normal;">
                                </span>
                            </td>
                            <td style="position:relative;top:-5px;text-align:center;">
                                <span style="font-size:35px!important;font-family:arial;">TAX INVOICE</span>

                            </td>
                        </tr>
                    }
                }
                <tr>
                    <td style="position:relative;top:-15px;height:35px;">
                        <span style="font-size:11px;font-family:arial;font-weight:normal;">
                        </span>
                    </td>
                </tr>

                <tr>
                    @*code changes by shiva for client document M and storage,northern montana and store and park want to spaces*@
                    @{
                        var padding = (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8"
                        || Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD"
                        || Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB"
                        || Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8"
                        || Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596"
                        || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB"
                        || Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88"
                        || Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA") ? "padding-left:40px" : "padding-left:10px";
                        var paddingtop = (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F") ? "padding-top:40px" : "padding-top:0px";
                    }
                    <td style="@padding; @paddingtop;vertical-align:top;">
                        <table style="max-width:385px;">
                            <tbody>
                                @*<tr>
                                        <td style="text-align:left;font-size:17px !important;">
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayDeliveryTo"))
                                        </td>
                                    </tr>*@
                                @*added by shiva for client document top box storage they want to delivery to*@
                                @if (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F")
                                {
                                    <tr>
                                        <td><b>Delivery To: </b> <br /> <br /></td>
                                    </tr>
                                }
                                @if (Model.GetDictionaryVisibleStatus( "Display-InvoiceTo"))
                                {
                                    <tr>
                                        <td>
                                            <span style="text-align:left;font-weight:bold;text-decoration:underline"><b>@Html.Raw(Model.GetDictionaryItem( "Display-InvoiceTo")) :</b></span>
                                        </td>
                                    </tr>
                                }
                                <tr>

                                    <td style="width:105px;">
                                        <span style="font-size:11px;font-family:arial;font-weight:normal;">
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayTenantName"))
                                            {
                                                <span>@Model.CustomerDetails?.FirstName @CustomerLastName <br /></span>
                                            }


                                            @if (Model.GetDictionaryVisibleStatus( "DisplayTenantCompanyName") && !string.IsNullOrEmpty(Model.BusinessCompanyName))
                                            {
                                                <span>@Model.BusinessCompanyName <br /></span>
                                            }

                                            @{
                                                var Address = CustAddress[0];
                                                var City = CustAddress[1];
                                                var State = CustAddress[2];
                                                var Zipcode = CustomerZip;
                                                var Country = CustAddress[3];
                                            }
                                            @*added by shiva for client document store and park they want to oder in this format *@
                                            @if (Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB")
                                            {
                                                if (Address != "+")
                                                {
                                                    var Address1 = Address.Split('+');
                                                    @Address1[0];<br />
                                                    if (Address1.Length > 1)
                                                    {
                                                        if (!string.IsNullOrEmpty(Address1[1]))
                                                        {
                                                            @Address1[1];<br />
                                                        }
                                                    }

                                                }
                                                if (!string.IsNullOrEmpty(Zipcode))
                                                {
                                                    @Html.Raw(CustomerZip)<br />
                                                }
                                                if (!string.IsNullOrEmpty(City))
                                                {
                                                    @CustAddress[1]<br />
                                                }
                                                if (!string.IsNullOrEmpty(State))
                                                {
                                                    @CustAddress[2]<br />
                                                }
                                                if (!string.IsNullOrEmpty(Country))
                                                {
                                                    @CustAddress[3]
                                                }
                                            }
                                            else if (Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA")
                                            {
                                                @Model.CustomerDetails.FirstName @CustomerLastName <br />
                                                if (!string.IsNullOrEmpty(Model.BusinessCompanyName))
                                                {
                                                    @Model.BusinessCompanyName <br />
                                                }
                                                if (!string.IsNullOrEmpty(Model.CustomerDetails?.AddressLine1))
                                                {
                                                    @Html.Raw(Model.CustomerDetails?.AddressLine1)<br />
                                                }
                                                if (!string.IsNullOrEmpty(Model.CustomerDetails?.AddressLine2))
                                                {
                                                    @Html.Raw(Model.CustomerDetails?.AddressLine2)<br />
                                                }
                                                if (!string.IsNullOrEmpty(Model.CustomerDetails?.City))
                                                {
                                                    @Html.Raw(Model.CustomerDetails?.City) <br />
                                                }
                                                if (!string.IsNullOrEmpty(Model.CustomerDetails?.State))
                                                {
                                                    @Html.Raw(Model.CustomerDetails?.State)<br />
                                                }
                                                if (!string.IsNullOrEmpty(Model.CustomerDetails?.Zipcode))
                                                {
                                                    @Html.Raw(Model.CustomerDetails?.Zipcode)<br />
                                                }
                                                if (!string.IsNullOrEmpty(Model.CustomerDetails?.Country))
                                                {
                                                    @Html.Raw(Model.CustomerDetails?.Country) <br />
                                                }
                                            }
                                            else
                                            {
                                                if (Address != "+" && Model.GetDictionaryVisibleStatus( "DisplayTenantAddresssLine1") && !string.IsNullOrEmpty(CustAddress[0]))
                                                {
                                                    CustAddress[0] = CustAddress[0].Replace("+", " ");
                                                    @CustAddress[0] <br />
                                                }
                                                if (!string.IsNullOrEmpty(City) && Model.GetDictionaryVisibleStatus( "DisplayTenantCity") && !string.IsNullOrEmpty(CustAddress[1]))
                                                {
                                                    @CustAddress[1]
                                                    //added by shiva for clientdocument komora they want to break in city(26-03-2019)
                                                    if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                                    {
                                                        <br />
                                                    }
                                                    else
                                                    {
                                                        <span></span>
                                                    }

                                                }
                                                //changes by shiva for clientdocument northern montana they want to comma in address
                                                var comma = "";
                                                if (Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD" || 
                                                Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8" || 
                                                Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F" || 
                                                Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596" || 
                                                Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                                                {
                                                    comma = ",";
                                                }

                                                if (!string.IsNullOrEmpty(State) && Model.GetDictionaryVisibleStatus( "DisplayTenantState") && !string.IsNullOrEmpty(CustAddress[2]))
                                                {
                                                    @CustAddress[2]<span>@comma</span>
                                                    if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                                    {
                                                        <br />
                                                    }
                                                }

                                                //added by shiva for client document komora they want to country in next and zip code last.(26-03-2019)
                                                if (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F" || 
                                                Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                                {
                                                    if (!string.IsNullOrEmpty(Country) && Model.GetDictionaryVisibleStatus( "DisplayTenantCountry") && 
                                                    !string.IsNullOrEmpty(CustAddress[3]))
                                                    {
                                                        @CustAddress[3]@comma
                                                    }
                                                }

                                                if (!string.IsNullOrEmpty(Zipcode) && 
                                                Model.GetDictionaryVisibleStatus( "DisplayTenantZipCode") && 
                                                !string.IsNullOrEmpty(CustomerZip))
                                                {
                                                    if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                                    {
                                                        <br />
                                                    }

                                                    if (Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD"
                                                        || Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8"
                                                        || Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F"
                                                        || Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596"
                                                        || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB"
                                                        || Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                                                    {
                                                        @Html.Raw(CustomerZip)<span>@comma</span>
                                                    }
                                                    else
                                                    {
                                                        @Html.Raw(CustomerZip)<br />
                                                    }

                                                }
                                                @*@if (!string.IsNullOrEmpty(Country)&& !string.IsNullOrEmpty(Zipcode) && Model.GetDictionaryVisibleStatus( "DisplayTenantCountry")&& Model.GetDictionaryVisibleStatus( "DisplayTenantZipCode"))
                                                    {
                                                    <span>,</span>
                                                    }*@
                                                if (Convert.ToString(loginclientId).ToUpper() != "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F" && 
                                                Convert.ToString(loginclientId).ToUpper() != "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                                {
                                                    if (!string.IsNullOrEmpty(Country) && Model.GetDictionaryVisibleStatus( "DisplayTenantCountry") && 
                                                    !string.IsNullOrEmpty(CustAddress[3]))
                                                    {
                                                        @CustAddress[3]
                                                    }
                                                }

                                            }
                                        </span>

                                    </td>



                                </tr>
                                <tr>
                                    <td style="padding-top:10px;">
                                        <table>
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayTenantMobileNumber") && 
                                            !string.IsNullOrEmpty(Model.CustomerDetails?.MobileNumber))
                                            {
                                                <tr>
                                                    <td style="padding:0px;">
                                                        <span>@Model.CustomerDetails?.MobileNumber <br /></span>
                                                    </td>
                                                </tr>
                                            }
                                            
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayTenantE-Mailaddress") && 
                                            !string.IsNullOrEmpty(Model.CustomerDetails?.EmailAddress))
                                            {
                                                <tr>
                                                    <td style="padding:0px;">
                                                        <span>@Model.CustomerDetails?.EmailAddress <br /></span>
                                                    </td>
                                                </tr>
                                            }
                                            
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayTenantTaxID") && 
                                            !string.IsNullOrEmpty(Model.TaxId))
                                            {
                                                <tr>
                                                    <td style="padding:0px;">
                                                        <span> @Html.Raw(Model.GetDictionaryItem("DisplayTenantTaxID"))</span>  
                                                        <span>@Model.TaxId</span>
                                                    </td>
                                                </tr>
                                            }
                                        </table>
                                    </td>
                                </tr>


                                @if (Convert.ToString(loginclientId).ToLower() == "67810ef0-6518-43e4-b9df-5e28730321b8")
                                {
                                    <tr>
                                        <td style="text-align:left;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">@locationName</span>
                                        </td>
                                    </tr>

                                }



                            </tbody>
                        </table>
                    </td>

                    <td style="padding-top: 0px; vertical-align: top;">
                        @*added by shiva for clientdocumnet M and z storage,northern montana and store and park they want to space*@
                        @{
                            var lineheight = (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8"
                                || Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD"
                               || Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB"
                               || Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F"
                              || Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596"
                              || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB"
                             || Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88"
                             || Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA") ? "line-height:2.4 !important" : "line-height:1.4 !important";
                        }
                        <table align="right" style="@lineheight">
                            <tbody>
                                @if (Convert.ToString(loginclientId).ToLower() == "67810ef0-6518-43e4-b9df-5e28730321b8")
                                {
                                    <tr>
                                        <td style="text-align:end;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">@locationName</span>
                                        </td>
                                    </tr>

                                }


                                @{
                                    clientcountry = clientcountry == null ? string.Empty : clientcountry.ToString().Trim();

                                    if (clientcountry != "US" && clientcountry != "United States")
                                    {
                                        DateOrTaxPoint = ukcountryDatetext;
                                    }

                                    if (Model.GetDictionaryVisibleStatus( "DisplayLabelHeaderDate"))
                                    {

                                        <tr>
                                            <td style="text-align:right;">
                                                <span style="font-size:11px;font-family:arial;font-weight:bold;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderDate"))</span>
                                            </td>
                                            <td class="salesInvdetailsRight-td">
                                                <span style="font-size:11px;font-family:arial;font-weight:normal;">@invoiceCreatedDate</span>
                                            </td>
                                        </tr>
                                    }

                                }

                                @if (Model.GetDictionaryVisibleStatus( "DisplayLabelHeaderInvoiceNumber"))
                                {
                                    if (Model.ClientInvoiceNumber != "0" && Model.ClientInvoiceNumber != "")
                                    {
                                        <tr>
                                            <td style="text-align:right;">
                                                <span style="font-size:11px;font-family:arial;font-weight:bold;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderInvoiceNumber"))@*Invoice Number*@</span>
                                            </td>
                                            <td class="salesInvdetailsRight-td">
                                                <span style="font-size:11px;font-family:arial;font-weight:normal;">@Model.ClientInvoiceNumber</span>
                                            </td>
                                        </tr>
                                    }

                                    if (Convert.ToString(loginclientId).ToUpper() == "C7D6EC8C-CAB1-42F8-B127-FC123A2560DB")
                                    {
                                        <tr>
                                            <td style="text-align:right;">
                                                <span style="font-size:11px;font-family:arial;font-weight:bold;">GST No</span>
                                            </td>
                                            <td>
                                                <span style="font-size:11px;font-family:arial;font-weight:normal;">101-675-673</span>
                                            </td>
                                        </tr>
                                    }
                                }
                                @if (Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB")
                                {
                                    if (Model.IsMergedInvoice)
                                    {
                                        List<string> lstClientLeaseNo = new List<string>();
                                        foreach (var item in Model.MergedContractDetails)
                                        {
                                            lstClientLeaseNo.Add(item.ClientContractNo);
                                        }

                                        string strlstClientLeaseNo = string.Join(",", lstClientLeaseNo.ToArray());

                                        <tr>
                                            <td style="text-align:right;">
                                                <span style="font-size:15px;font-family:arial;font-weight:bold;">Ihrer Referenz</span>
                                            </td>
                                            <td>
                                                <span style="word-break: break-word;white-space: normal;"> @strlstClientLeaseNo </span>
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <td style="text-align:right;">
                                                <span style="font-size:15px;font-family:arial;font-weight:bold;">Ihrer Referenz</span>
                                            </td>
                                            <td>
                                                <span style="word-break: break-word;white-space: normal;"> @Model.ClientContractNo</span>
                                            </td>
                                        </tr>
                                    }
                                }
                                @if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                {
                                    <tr>
                                        <td style="text-align:right;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">Your Reference</span>
                                        </td>
                                        <td>
                                            <span> @Model.ContractId</span>
                                        </td>
                                    </tr>
                                }
                                @if (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                                {
                                    <tr>
                                        <td style="text-align:right;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">Your Reference</span>
                                        </td>
                                        <td>
                                            <span> @Model.ClientContractNo</span>
                                        </td>
                                    </tr>
                                }
                                @if (Model.GetDictionaryVisibleStatus( "DisplayLabelHeaderPage"))
                                {
                                    if (Convert.ToString(loginclientId).ToLower() != "7bd64df1-bb45-4a5d-a8f8-f606290c525c")
                                    {
                                        <tr>
                                            <td style="text-align:right;">
                                                <span style="font-size:11px;font-family:arial;font-weight:bold;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderPage"))</span>
                                            </td>
                                            <td>
                                                @if (Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867" || Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF")
                                                {
                                                    <span style="font-size:11px;font-family:arial;font-weight:normal;">01055-4600-3129</span>
                                                }
                                                else
                                                {
                                                    <span style="font-size:11px;font-family:arial;font-weight:normal;">1 - 1</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }

                                @if (Model.GetDictionaryVisibleStatus( "DisplayLabelHeaderBillingPeriod"))
                                {
                                    <tr>
                                        <td style="text-align:right;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderBillingPeriod"))@*Charge Period*@</span>
                                        </td>
                                        <td class="salesInvdetailsRight-td">
                                            <span style="font-size:11px;font-family:arial;font-weight:normal;">@InvoiceFromDate</span>
                                        </td>
                                    </tr>
                                }
                                @if (Model.GetDictionaryVisibleStatus( "DisplayLabelHeaderBillingPeriodto"))
                                {
                                    <tr>
                                        <td style="text-align:right;padding-top:0px;">
                                            <span style="font-size:11px;font-family:Arial;font-weight:bold;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderBillingPeriodto"))@*to*@</span>
                                        </td>
                                        <td style="padding-top:0px;" class="salesInvdetailsRight-td">
                                            <span style="font-size:11px;font-family:Arial;font-weight:normal;">@invoiceToDate</span>
                                        </td>
                                    </tr>
                                }
                                @if (Model.GetDictionaryVisibleStatus( "DisplayLabelScheduleMoveOutDate"))
                                {
                                    <tr>
                                        <td style="text-align:right;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelScheduleMoveOutDate"))</span>
                                        </td>
                                        <td class="salesInvdetailsRight-td">
                                            <span style="font-size:11px;font-family:arial;font-weight:normal;">@estimatedTerminationDate</span>
                                        </td>
                                    </tr>
                                }

                                @if (Model.GetDictionaryVisibleStatus( "DisplayLabelHeaderBillingCycle"))
                                {
                                    <tr>
                                        <td style="text-align:right;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderBillingCycle"))</span>
                                        </td>
                                        <td class="salesInvdetailsRight-td">
                                            <span style="font-size:11px;font-family:arial;font-weight:normal;">@BillingCycle</span>
                                        </td>
                                    </tr>
                                }

                                @if (Convert.ToString(loginclientId).ToLower() == "beac2c60-e463-443e-8dc4-5701eaa08a3e")
                                {
                                    <tr>
                                        <td style="text-align:right;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">Tax Id</span>
                                        </td>
                                        <td>
                                            <span style="font-size:11px;font-family:arial;font-weight:normal;">@documentConfig.InvoiceVATNo</span>
                                        </td>
                                    </tr>
                                }
                                @if (!string.IsNullOrEmpty(documentConfig.InvoiceVATNo) && Model.GetDictionaryVisibleStatus( "DisplayVATNumber"))
                                {
                                    <tr>
                                        <td style="text-align:right;">
                                            <span style="font-size:11px;font-family:arial;font-weight:bold;">@TaxOrVat</span>
                                        </td>
                                        <td>
                                            <span style="font-size:11px;font-family:arial;font-weight:normal;">@documentConfig.InvoiceVATNo</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>

                //Model.GetDictionaryItem( "FontSizeCustomization")) 

                @if (Model.GetDictionaryVisibleStatus( "DisplayLabelHeaderNameofthedocument"))
                {
                    //added by prakash during credit note development time on sprint 22 on 19-11-2018.
                    // changes by shiva for client northern montana they want to sales invoice fontsize 11 px (14-03-2019)
                    var fontsize = "";

                    if (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8" || 
                    Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB" || 
                    Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8" || 
                    Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD" || 
                    Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                    {
                        fontsize = "font-size:40px!important";
                    }
                    else
                    {
                        fontsize = "font-size:25px!important";
                    }

                    if (Model.InvoiceDetail.Category == "INVOICE-CREDITNOTE")
                    {
                        var displayLabelHeaderNameoftheCreditNoteDocument = 
                            Model.GetDictionaryItem( "DisplayLabelCreditNotedocument");
                        
                            displayLabelHeaderNameoftheCreditNoteDocument = 
                                string.IsNullOrEmpty(displayLabelHeaderNameoftheCreditNoteDocument) ? 
                                "Credit Note" : displayLabelHeaderNameoftheCreditNoteDocument;

                        if (!Model.GetDictionaryVisibleStatus( "DisplayLabelCreditNotedocument"))
                        {
                            displayLabelHeaderNameoftheCreditNoteDocument = "";
                        }

                        <tr>
                            <td colspan="3" style="padding-top:20px;">
                                <span style="@fontsize;font-family:arial;">@Html.Raw(displayLabelHeaderNameoftheCreditNoteDocument)@*Credit Note INVOICE*@</span>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" style="padding-top:20px; text-align: center;">
                                @if (Convert.ToString(loginclientId).ToUpper() == "883CE2CF-FC12-46AF-8A66-CF9E53091D5C")
                                {
                                    <span style="@fontsize;font-family:arial;color:red">Invoice فاتورة</span>
                                }
                                else
                                {
                                    <span style="@fontsize;font-family:arial;">@Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderNameofthedocument"))@*SALES INVOICE*@</span>
                                }
                                @if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8" || 
                                Convert.ToString(loginclientId).ToUpper() == "5700664A-16CA-435A-ABC4-190B5E5CFD10" || 
                                Convert.ToString(loginclientId).ToUpper() == "ED1C8BBD-C94E-4B68-A1E1-25580D343337")
                                {
                                    <span style="font-size: 15px !important; font-family: arial;">за послуги оренди від @invoiceCreatedDate згідно договором оренди № @invoiceDetail.ContractId</span>
                                }
                            </td>
                        </tr>
                    }

                }

                @if (Model.LeaseInvoicePastDue == null)
                {
                    Model.LeaseInvoicePastDue = new List<LeaseInvoicePastDue>();
                }

                @if (displayPastDueTop == true && Model.LeaseInvoicePastDue.Count() > 0)
                {
                    if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                    {
                        <tr>
                            <td height="20">
                                &nbsp;
                            </td>
                        </tr>
                    }

                    <tr style="page-break-before:avoid;">
                        <td colspan="2">
                            <table style="page-break-before:avoid;">
                                @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueText"))
                                {
                                    <span id="spnPastDueText" style="font-size:20px!important;"> @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueText"))</span>
                                }
                                @*@if (Model.LeaseInvoicePastDue.Count() > 0)
                                    {*@

                                <tr style="background: #eee;page-break-before:avoid;">

                                    @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueUnitnumber"))
                                    {
                                        <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueUnitnumber"))
                                        </th>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueInvoicePeriod"))
                                    {
                                        <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueInvoicePeriod"))    @*Invoice Period*@
                                        </th>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueBalance"))
                                    {
                                        <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueBalance"))    @*Balance*@
                                        </th>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueLatefee"))
                                    {
                                        <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                            @*LateFee*@  @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueLatefee"))
                                        </th>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueTotal"))
                                    {
                                        <th style="text-align:right !important;padding-top:1px;padding-bottom:1px;padding-right:15px;">
                                            @*Total*@@Html.Raw(Model.GetDictionaryItem( "DisplayPastDueTotal"))
                                        </th>
                                    }
                                </tr>
                                @foreach (var item in Model.LeaseInvoicePastDue)
                                {
                                    <tr style="page-break-before:avoid;">
                                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueUnitnumber"))
                                        {
                                            <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                                @item.UnitNumber
                                            </td>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueInvoicePeriod"))
                                        {
                                            var invoicetoDate = "-";
                                            var invoicefromDate = "-";
                                            if ((Convert.ToDateTime(item.InvoiceToDate).ToShortDateString() != "1/1/0001") && (Convert.ToDateTime(item.InvoiceToDate).ToShortDateString() != null) && (Convert.ToDateTime(item.InvoiceToDate).ToShortDateString() != "01/01/0001") && Convert.ToDateTime(item.InvoiceToDate) != DateTime.MinValue)
                                            {
                                                invoicetoDate = Convert.ToDateTime(item.InvoiceToDate).ToShortDateString();
                                            }
                                            if ((Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString() != "1/1/0001") && (Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString() != null) && (Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString() != "01/01/0001") && Convert.ToDateTime(item.InvoiceFromDate) != DateTime.MinValue)
                                            {
                                                invoicefromDate = Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString();
                                            }

                                            <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                                @invoicetoDate - @invoicefromDate
                                            </td>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueBalance"))
                                        {
                                            <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                                @Convert.ToDecimal(item.Balance).ToString("c")
                                            </td>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueLatefee"))
                                        {
                                            <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                                @Convert.ToDecimal(item.LatefeebyBalance).ToString("c")
                                            </td>
                                        }
                                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueTotal"))
                                        {
                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                @{

                                                    SubUnpaidTotal = Convert.ToDecimal(item.Balance) + Convert.ToDecimal(item.LatefeebyBalance);
                                                    PastDue += Convert.ToDecimal(SubUnpaidTotal);
                                                }
                                                @SubUnpaidTotal.ToString("c")
                                            </td>
                                        }
                                    </tr>


                                }
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueBalanceAmount"))
                            {
                                <table style="margin-top:15px;">
                                    <tr style=" border: 1px solid #ddd;">
                                        <td style="visibility:hidden;width:30%;"></td>
                                        <td style="visibility:hidden;width:35%;"></td>
                                        <td colspan="2" style="text-align: center; font-weight: bold; padding-top: 9px; border-left: 1px solid #ddd; border-right: 1px solid white !important; padding-bottom: 9px;">
                                            @*Total Past Due*@
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueBalanceAmount"))
                                        </td>
                                        <td colspan="3" style="text-align: right; padding-top: 9px; padding-bottom: 9px; border-right: 1px solid #ddd;">
                                            @PastDue.ToString("c")

                                        </td>
                                    </tr>
                                </table>
                            }
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="2" style="width:100%;border:1px solid #ddd;padding:0;" cellspacing="10">
                        <table class="gridspan5" width="100%" style="width:100%;border:0;border-collapse:collapse;line-height:1.5;">
                            <thead>
                                <tr style="font-size:11px;font-family:arial;border-bottom:1px solid #ddd;font-weight:bold;background:#eee;line-height:1;">
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                    {
                                        <th style="text-align:left !important; padding-top: 9px; padding-bottom: 9px; padding-left: 5px;width:25%;">
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDueItem"))
                                        </th>
                                    }
                                    <!--<th style="text-align:left;padding-top:9px;padding-bottom:9px;">
                                        Charge Period
                                    </th>-->
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                    {
                                        //added by shiva for clientdocument ukraine client increase the width
                                        var width = (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88" || isCblockersselfstorage) ? "width:30%;" : "width:10%;";
                                        <th style="text-align:right !important;padding-top:1px;padding-bottom:1px;@width;">
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDueQuantity"))   @*Quantity*@
                                        </th>
                                    }


                                    @if (DisplayTax == "1" && !isCblockersselfstorage)
                                    {
                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                        {
                                            <th style="text-align:right !important;padding-top:1px;padding-bottom:1px;">
                                                @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDueNetCost"))  @*Net Cost*@
                                            </th>
                                        }
                                        clientcountry = clientcountry == null ? string.Empty : clientcountry.ToString().Trim();
                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                        {

                                            if (IsEnabledMultipleTax && multipleTaxHeaderCount > 0 && multipleTaxHeaderDet != null)
                                            {
                                                for (var th = 0; th < multipleTaxHeaderCount; th++)
                                                {
                                                    <th style="text-align:right !important;padding-top:1px;padding-bottom:1px;">
                                                        <span>@Html.Raw(multipleTaxHeaderDet[th].TaxName) </span><br /> <span class="downtxt">(@multipleTaxHeaderDet[th].Tax1 %)</span>
                                                    </th>
                                                }
                                            }
                                            else
                                            {
                                                if (!IsEnabledMultipleTax)
                                                {
                                                    <th style="text-align:right !important;padding-top:1px;padding-bottom:1px;padding-right:15px;">
                                                        @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDueTaxPercent"))   @*@TaxOrVat*@ <span class="downtxt">
                                                            @if (Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596")
                                                            {
                                                                <span>(@taxpercentage %)</span>
                                                            }
                                                            @*(@taxpercentage %)*@
                                                        </span>
                                                    </th>
                                                }
                                                else
                                                {
                                                    <th style="text-align:right !important;padding-top:1px;padding-bottom:1px;">
                                                        @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDueTaxPercent"))   @*@TaxOrVat*@
                                                    </th>
                                                }
                                            }


                                        }
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                    {
                                        <th style="text-align:right !important;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                            @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDueGrossCost"))@*Total*@
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @if (newInvoiceModel != null)
                                {
                                    List<long> lstContractIds = new List<long>();
                                    
                                    foreach (var item in newInvoiceModel)
                                    {
                                        lstContractIds.Add(item.ContractID);
                                    }

                                    lstContractIds = lstContractIds.Distinct().ToList();
                                    
                                    var invoiceItemDetail = newInvoiceModel
                                        .Where(x => x.Item != "Transferred")
                                        .OrderByDescending(x => x.ContractID)
                                        .ThenBy(xx => xx.OrderNo).ToList();
                                    
                                    foreach (var objItem in invoiceItemDetail)
                                    {
                                        //For loop start
                                        var invoiceItemTaxDet = new List<InvoiceAppliedTaxDetail>();
                                        if (IsEnabledMultipleTax && Model.InvoiceAppliedTaxDetails != null)
                                        {
                                            objItem.ItemId = objItem.ItemId ?? Guid.Empty;

                                            invoiceItemTaxDet = Model.InvoiceAppliedTaxDetails
                                            .Where(xx => xx.ItemServiceId == objItem.ItemServiceId && xx.ContractId == objItem.ContractID).ToList();
                                        }

                                        if (objItem.Item != "Insurance")
                                        {
                                            if (objItem.Price != 0)
                                            {
                                                individualSubTotal = individualSubTotal + Convert.ToDecimal(objItem.Price);
                                                individualTotal = DisplayTax == "1" ? (individualTotal + Convert.ToDecimal(objItem.totAmt)) : (individualTotal + Convert.ToDecimal(objItem.Price));
                                                individualTaxTotal = individualTaxTotal + Convert.ToDecimal(objItem.Tax);
                                                
                                                var whitespacenowrap = (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88") ? "white-space: nowrap" : "";
                                                
                                                <tr style="text-align:center; padding-top: 9px; padding-bottom: 9px; padding-left: 5px;@whitespacenowrap">
                                                    @{
                                                        var objectDescription = objItem.Description;
                                                        var ObjItemdata = objItem.Item;
                                                        string[] objectDescription1 = null;
                                                        string[] splitCustomClientId = null;
                                                        string customClientId = "BD2A7C78-C1BB-4E9F-9F0F-D97875F59403;5E824297-5808-4C04-8F4B-D82D043F6DD8;273470E5-2BB7-4667-907A-3E05B2A21867;80BB9F0E-8706-435A-BE03-756E51AD9ADF;5462327C-DEDE-42C0-9EA5-E731C994A23E;16D8E222-2133-45CD-AD72-A63EE0607B06;A86CA415-7EBA-4E3F-B8C3-BBEC4720FBC5";
                                                        splitCustomClientId = customClientId.Split(';');
                                                        var loginClientID = Convert.ToString(loginclientId).ToUpper();
                                                        bool customObjectDescription = false;

                                                        if (splitCustomClientId.Contains(loginClientID) && objectDescription.Contains(Model.UnitNumber))
                                                        {
                                                            objectDescription = objectDescription.Substring(0, objectDescription.LastIndexOf(Model.UnitNumber));
                                                            objectDescription = objectDescription + " " + Model.UnitNumber;
                                                            customObjectDescription = true;

                                                        }

                                                        //if (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8" || Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867"
                                                        //                   || Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF" || loginclientId == new Guid("5462327C-DEDE-42C0-9EA5-E731C994A23E") || Convert.ToString(loginclientId).ToUpper() == "16D8E222-2133-45CD-AD72-A63EE0607B06" || Convert.ToString(loginclientId).ToUpper() == "A86CA415-7EBA-4E3F-B8C3-BBEC4720FBC5")
                                                        //{
                                                        //    bool MandzremoveUnitsize = objectDescription.Contains("-");

                                                        //    if (MandzremoveUnitsize)
                                                        //    {
                                                        //        objectDescription = objectDescription.Substring(0, objectDescription.LastIndexOf("-"));
                                                        //        objectDescription = objectDescription.Replace(",Size", "");
                                                        //    }
                                                        //}

                                                        if (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F" || 
                                                        Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB")
                                                        {
                                                            if (DISPLAYUNITBASEDON == "SQFT")
                                                            {
                                                                objectDescription = objItem.DescriptionInches;
                                                            }
                                                            else if (DISPLAYUNITBASEDON == "MQ")
                                                            {
                                                                objectDescription = objItem.DescriptionSquareMeter;
                                                            }
                                                            else
                                                            {

                                                            }
                                                            if (objItem.Item.ToUpper() == "DEPOSIT")
                                                            {
                                                                ObjItemdata = !string.IsNullOrEmpty(documentConfig.DepositText) ? documentConfig.DepositText : objItem.Item;
                                                            }


                                                            if (objItem.Item.ToUpper() == "DEPOSIT")
                                                            {
                                                                objectDescription = !string.IsNullOrEmpty(documentConfig.DepositText) ? documentConfig.DepositText : objItem.Description;
                                                            }

                                                            if (Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB" || 
                                                            Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867" || 
                                                            Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF" || 
                                                            Convert.ToString(loginclientId).ToUpper() == "6DC585E9-8030-4A8F-B875-49031A8F7C96")
                                                            {
                                                                if (objectDescription.Contains("-"))
                                                                {
                                                                    objectDescription1 = objectDescription.Split('-');
                                                                }
                                                                else
                                                                {
                                                                    objectDescription1 = objectDescription.Split(',');
                                                                }
                                                            }

                                                        }

                                                        if (Convert.ToString(loginclientId).ToUpper() != "5E824297-5808-4C04-8F4B-D82D043F6DD8" && 
                                                        Convert.ToString(loginclientId).ToUpper() != "273470E5-2BB7-4667-907A-3E05B2A21867" && 
                                                        Convert.ToString(loginclientId).ToUpper() != "80BB9F0E-8706-435A-BE03-756E51AD9ADF" && 
                                                        Convert.ToString(loginclientId).ToUpper() != "6DC585E9-8030-4A8F-B875-49031A8F7C96")
                                                        {
                                                            objectDescription = 
                                                                InvoiceGenerationHelper.ReturnInvoicePDFDescription(
                                                                DISPLAYUNITBASEDON ?? string.Empty, objItem, documentConfig, objectDescription);

                                                            if (objectDescription.ToUpper() == "DEPOSIT" || objectDescription == documentConfig.DepositText)
                                                            {
                                                                objectDescription += "-" + Model.UnitNumber;
                                                            }
                                                        }

                                                        if (objItem.Item == "CREDITNOTE" || objItem.Item == "INVOICE-CREDITNOTE-PALLET")
                                                        {
                                                            var startDate = objItem.StartDate != null ? Convert.ToDateTime(objItem.StartDate).ToShortDateString() : "";
                                                            var endDate = objItem.EndDate != null ? Convert.ToDateTime(objItem.EndDate).ToShortDateString() : "";
                                                            objectDescription = Html.Raw(Model.GetDictionaryItem( "DisplayLabelHeaderInvoiceNumber")) + " - " + objItem.Description + "  ";
                                                            
                                                            if (!string.IsNullOrEmpty(startDate))
                                                            {
                                                                objectDescription = objectDescription + ",  " + startDate + " " + Model.GetDictionaryItem( "DisplayLabelHeaderBillingPeriodto") + " " + endDate;
                                                            }
                                                        }
                                                    }

                                                    @if (ObjItemdata == "Rent")
                                                    {
                                                        if (Convert.ToString(loginclientId).ToLower() == "67810ef0-6518-43e4-b9df-5e28730321b8")
                                                        {
                                                            objectDescription = locationName + " " + objectDescription;
                                                        }
                                                    }

                                                    @if (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                                                    {
                                                        objectDescription = objItem.Description;
                                                    }

                                                    @if (Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596")
                                                    {
                                                        objectDescription = objectDescription.Replace("Rental of Room", "Наем на помещение");
                                                        objectDescription = objectDescription.Replace("Square Meter", "кв.м.");
                                                    }

                                                    @if (Convert.ToString(loginclientId).ToLower() == "e6adc2f6-2e89-4139-8c6f-8ceb80efecbb")
                                                    {
                                                        objectDescription = objectDescription.Replace("Square Meter", "mq");
                                                    }

                                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                    {
                                                        <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                            @if (Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F")
                                                            {
                                                                if (ObjItemdata == "Rent")
                                                                {
                                                                    @ObjItemdata
                                                                }
                                                                else
                                                                {
                                                                    @objectDescription
                                                                }
                                                            }
                                                            else if (Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB")
                                                            {
                                                                @objectDescription1[0]
                                                            }
                                                            else
                                                            {
                                                                if (Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867" || 
                                                                Convert.ToString(loginclientId).ToUpper() == "80BB9F0E-8706-435A-BE03-756E51AD9ADF")
                                                                {
                                                                    if (ObjItemdata == "Rent")
                                                                    {
                                                                        <span>Locker Type</span> <span> @BuildingName</span> @objectDescription
                                                                    }
                                                                    else
                                                                    {
                                                                        @objectDescription
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    if (ObjItemdata == "Rent" && objOverallConfigData.AccountSettingsTable4.IsActivateNewUI)
                                                                    {
                                                                        bool isHavingHyphen = objectDescription.Contains("-");

                                                                        if (loginclientId == new Guid("62CF7507-A82D-493F-818E-34C54861B5FA"))
                                                                        {
                                                                            int index = objectDescription.IndexOf(",");
                                                                            if (index >= 0)
                                                                            {
                                                                                objectDescription = objectDescription.Substring(0, index);
                                                                            }
                                                                        }
                                                                        else if (isHavingHyphen && customObjectDescription == false)
                                                                        {
                                                                            var rentalInfoArr = objectDescription.Split('-');

                                                                            Model.UnitInfo.Height = Model.UnitInfo.Height == 0 ? 1M : Model.UnitInfo.Height;
                                                                            
                                                                            decimal areaValue = Convert.ToDecimal(Model.UnitInfo.Width) * 
                                                                                Convert.ToDecimal(Model.UnitInfo.Depth);
                                                                            
                                                                            decimal volumeValue = Convert.ToDecimal(Model.UnitInfo.Width) * 
                                                                                Convert.ToDecimal(Model.UnitInfo.Depth * Model.UnitInfo.Height);

                                                                            if (sizeRoundUp)
                                                                            {
                                                                                areaValue = Math.Round(areaValue);
                                                                                volumeValue = Math.Round(volumeValue);
                                                                            }

                                                                            if (Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "SIZE")
                                                                            {
                                                                                objectDescription = rentalInfoArr[0] + "(" + 
                                                                                Convert.ToDecimal(Model.UnitInfo.Width).ToString("N2") + 
                                                                                " x " + Convert.ToDecimal(Model.UnitInfo.Depth).ToString("N2") + 
                                                                                ") " + Model.UnitStorageTypeInfo.DisplayStorageTypeBasedOn_MetricSize.ToLower();
                                                                            }
                                                                            else if (Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "QSIZE")
                                                                            {
                                                                                objectDescription = rentalInfoArr[0] + " QSize (" + 
                                                                                Convert.ToDecimal(Model.UnitInfo.Width).ToString("N2") + 
                                                                                " x " + Convert.ToDecimal(Model.UnitInfo.Depth).ToString("N2") + 
                                                                                " x " + Convert.ToDecimal(Model.UnitInfo.Height).ToString("N2") + 
                                                                                ") " + Model.UnitStorageTypeInfo.DisplayStorageTypeBasedOn_MetricSize.ToLower();
                                                                            }
                                                                            else if (Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "SQFT" || 
                                                                            Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "M2" || 
                                                                            Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "SQCM")
                                                                            {
                                                                                objectDescription = rentalInfoArr[0] + " " + areaValue.ToString("N2") + 
                                                                                " " + Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat.ToLower();
                                                                            }
                                                                            else if (Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "QMT" || 
                                                                            Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "QCM" || 
                                                                            Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat == "QFT")
                                                                            {
                                                                                objectDescription = rentalInfoArr[0] + " " + volumeValue.ToString("N2") + " " + 
                                                                                Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat.ToLower();
                                                                            }
                                                                            else
                                                                            {
                                                                                objectDescription = rentalInfoArr[0] + " " + volumeValue.ToString("N2") + " " + 
                                                                                Model.UnitStorageTypeInfo.DisplayAreaOrVolumeMeasurementFormat.ToLower();
                                                                            }
                                                                        }

                                                                        //Change size according to new UI Setup
                                                                        @objectDescription
                                                                    }
                                                                    else
                                                                    {
                                                                        @objectDescription
                                                                    }
                                                                }
                                                            }

                                                        </td>
                                                    }

                                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                                    {
                                                        //added by shiva for clientdocument ukrine client textalign right
                                                        var textalign = (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88" || 
                                                        isCblockersselfstorage) ? "text-align:right;" : "text-align:center;";
                                                        
                                                        <td style="@textalign;padding-top:1px;padding-bottom:1px;">
                                                            @objItem.ItemQty
                                                        </td>
                                                    }

                                                    @if (DisplayTax == "1" && !isCblockersselfstorage)
                                                    {
                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                @Convert.ToDecimal(objItem.Price).ToString("c")
                                                            </td>
                                                        }
                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                                        {
                                                            if (IsEnabledMultipleTax && multipleTaxHeaderDet != null && multipleTaxHeaderCount > 0)
                                                            {
                                                                for (var td = 0; td < multipleTaxHeaderCount; td++)
                                                                {
                                                                    var itemTaxdet = invoiceItemTaxDet != null ? invoiceItemTaxDet.FirstOrDefault(xx => 
                                                                        xx.TaxMasterId == multipleTaxHeaderDet[td].Id) : null;
                                                                    
                                                                    if (itemTaxdet != null)
                                                                    {
                                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                            @itemTaxdet.TaxAmount.ToString("c")
                                                                        </td>
                                                                    }
                                                                    else
                                                                    {
                                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                            @Convert.ToDecimal(0).ToString("c")
                                                                        </td>
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                    @Convert.ToDecimal(objItem.Tax).ToString("c")
                                                                </td>
                                                            }
                                                        }
                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                                @Convert.ToDecimal(objItem.totAmt).ToString("c")
                                                            </td>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                                @Convert.ToDecimal(objItem.Price).ToString("c")
                                                            </td>
                                                        }
                                                    }
                                                </tr>
                                            }
                                        }
                                        else
                                        {

                                            var exclIPT = Convert.ToDecimal(objItem.Price ?? 0) - Convert.ToDecimal(objItem.Tax ?? 0);
                                            var inclTax = Convert.ToDecimal(objItem.Price ?? 0);
                                            var insuranceDesc = objItem.Description.Replace("$", currencySymbol);
                                            if (Convert.ToString(loginclientId).ToLower() == "14b532a9-ec98-4761-b745-fe16df1c5bff")
                                            {
                                                insuranceDesc = insuranceDesc.Replace(",", ".");
                                            }
                                            if (!string.IsNullOrEmpty(insuranceDesc))
                                            {
                                                if (Convert.ToString(loginclientId).ToUpper() == "03DDAC0B-BF32-4572-8F6C-7F68B3041031")
                                                {
                                                    insuranceDesc = insuranceDesc.Replace("Contents Insurance", "Forsikring, dækning");
                                                }
                                                else if (Convert.ToString(loginclientId).ToUpper() == "AB52DBBD-0E71-46BA-9D96-3CAA70E79A80")
                                                {
                                                    insuranceDesc = insuranceDesc.Replace("Contents Insurance", "Contents Liability");
                                                }
                                                else if (Convert.ToString(loginclientId).ToUpper() == "33DDA8C6-67DB-4A51-9BB4-8E9440AC6C57")
                                                {
                                                    insuranceDesc = insuranceDesc.Replace("Contents Insurance", "Forsikring");
                                                }
                                                else if (Convert.ToString(loginclientId).ToUpper() == "3592D22A-E036-423B-A8BF-13EE316FBF48")
                                                {
                                                    insuranceDesc = insuranceDesc.Replace("Contents Insurance", "Insurance including IPT");
                                                }
                                                else if (Convert.ToString(loginclientId).ToUpper() == "62CF7507-A82D-493F-818E-34C54861B5FA")
                                                {
                                                    insuranceDesc = insuranceDesc.Replace("Contents Insurance", "Seguro");
                                                }
                                                else
                                                {
                                                    insuranceDesc = insuranceDesc.Replace("Contents Insurance", insuranceTextDisplay);

                                                }
                                            }
                                            if (objItem.isThirdParty == false)
                                            {
                                                individualSubTotal = individualSubTotal + inclTax;
                                                individualTotal = individualTotal + inclTax;

                                            }
                                            string ipt = string.Empty;
                                            if (Model.Insurance != null)
                                            {
                                                ipt = Convert.ToString(Model.Insurance.IPTPercentage);
                                            }

                                            <tr style="text-align:center; padding-top: 9px; padding-bottom: 9px; padding-left: 5px;">
                                                @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                {
                                                    <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                        @insuranceDesc
                                                    </td>
                                                }

                                                @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                                {
                                                    //added by shiva for clientdocument ukraine client textalign right
                                                    var textalign = (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88" || isCblockersselfstorage) ? "text-align:right;" : "text-align:center;";
                                                    
                                                    <td style="@textalign;padding-top:1px;padding-bottom:1px;">
                                                        @objItem.ItemQty
                                                    </td>
                                                }

                                                @if (DisplayTax == "1" && !isCblockersselfstorage)
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                            @Convert.ToDecimal(exclIPT).ToString("c")
                                                        </td>
                                                    }

                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                                    {
                                                        if (IsEnabledMultipleTax && multipleTaxHeaderDet != null && multipleTaxHeaderCount > 0)
                                                        {
                                                            for (var td = 0; td < multipleTaxHeaderCount; td++)
                                                            {
                                                                var itemTaxdet = invoiceItemTaxDet != null ?
                                                                    invoiceItemTaxDet.FirstOrDefault(xx => xx.TaxMasterId == multipleTaxHeaderDet[td].Id) : null;
                                                                if (itemTaxdet != null)
                                                                {
                                                                    <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                        @itemTaxdet.TaxAmount.ToString("c")
                                                                    </td>
                                                                }
                                                                else
                                                                {
                                                                    <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                        @Convert.ToDecimal(0).ToString("c")
                                                                    </td>
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (objItem.Tax > 0 && !IsEnabledMultipleTax && !isCblockersselfstorage && IsColumbiaMovers)
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                    @Convert.ToDecimal(objItem.Tax).ToString("c")
                                                                </td>
                                                            }
                                                            else
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                    @Convert.ToDecimal(0.00).ToString("c")
                                                                </td>
                                                            }
                                                        }
                                                    }
                                                }
                                                @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                {
                                                    if (IsEnabledMultipleTax)
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                            @Convert.ToDecimal(inclTax).ToString("c")
                                                        </td>
                                                    }
                                                    else
                                                    {
                                                        if (objItem.Tax > 0 && !IsEnabledMultipleTax && !isCblockersselfstorage && IsColumbiaMovers)
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                @Convert.ToDecimal(inclTax).ToString("c")
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                                @Convert.ToDecimal(exclIPT).ToString("c")
                                                            </td>
                                                        }
                                                    }

                                                }
                                            </tr>

                                            if (objItem.Tax > 0 && !IsEnabledMultipleTax && !isCblockersselfstorage && !IsColumbiaMovers)
                                            {
                                                <tr style="text-align:center; padding-top: 9px; padding-bottom: 9px; padding-left: 5px;" class="page-break">

                                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                    {

                                                        if (!string.IsNullOrEmpty(ipt))
                                                        {
                                                            <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                                @Html.Raw(Model.GetDictionaryItem( "DisplayIPTTAXText"))  (@ipt %) @*Insurance Premium Tax*@
                                                            </td>
                                                        }
                                                        else
                                                        {
                                                            <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                                @Html.Raw(Model.GetDictionaryItem( "DisplayIPTTAXText"))  @*Insurance Premium Tax*@
                                                            </td>
                                                        }
                                                    }


                                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;"></td>
                                                    }
                                                    @if (DisplayTax == "1")
                                                    {
                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                @Convert.ToDecimal(objItem.Tax).ToString("c")
                                                            </td>
                                                        }

                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                @Convert.ToDecimal(0.00).ToString("c")
                                                            </td>
                                                        }
                                                    }
                                                    @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                            @Convert.ToDecimal(objItem.Tax).ToString("c")
                                                        </td>
                                                    }
                                                </tr>
                                            }
                                        }
                                        if (objItem.Discount > 0)
                                        {
                                            var totaldiscount = (objItem.Discount ?? 0) + (objItem.DiscountTax ?? 0);
                                            individualTaxTotal = individualTaxTotal - (objItem.DiscountTax ?? 0);
                                            individulaDiscountTotal = individulaDiscountTotal + totaldiscount;
                                            individualTotal = individualTotal - totaldiscount;
                                            individualSubTotal = individualSubTotal - (objItem.Discount ?? 0);

                                            <tr style="text-align:center; padding-top: 9px; padding-bottom: 9px; padding-left: 5px;" class="page-break">
                                                @{
                                                    var objDescription = objItem.Item == "Rent" ? objOverallConfigData.clientAppAndDocumentConfig.AdvancePaymentDiscount : objItem.Description;
                                                }
                                                @if (objItem.Item != "Refund")
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                    {
                                                        <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                            @objDescription
                                                            @if (Model.GetDictionaryVisibleStatus( "DisplayAdjustedThruAdvanceDiscount"))
                                                            {
                                                                @Html.Raw(Model.GetDictionaryItem( "DisplayAdjustedThruAdvanceDiscount"))
                                                            }
                                                        </td>
                                                    }
                                                }
                                                else
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                    {
                                                        <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                            @objDescription
                                                        </td>
                                                    }
                                                }

                                                @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                                {
                                                    <td style="text-align:right;padding-top:5px;padding-bottom:9px;"></td>
                                                }

                                                @if (DisplayTax == "1" && !isCblockersselfstorage)
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                            -@Convert.ToDecimal(objItem.Discount).ToString("c")
                                                        </td>
                                                    }
                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                                    {
                                                        if (IsEnabledMultipleTax && multipleTaxHeaderDet != null && multipleTaxHeaderCount > 0)
                                                        {
                                                            for (var td = 0; td < multipleTaxHeaderCount; td++)
                                                            {
                                                                var itemTaxdet = multipleTaxHeaderDet != null ? 
                                                                    invoiceItemTaxDet.FirstOrDefault(xx => 
                                                                    xx.TaxMasterId == multipleTaxHeaderDet[td].Id) : null;
                                                                
                                                                if (itemTaxdet != null)
                                                                {
                                                                    <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                        -@itemTaxdet.DiscountTax.ToString("c")
                                                                    </td>
                                                                }
                                                                else
                                                                {
                                                                    <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                        @Convert.ToDecimal(0).ToString("c")
                                                                    </td>
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                -@Convert.ToDecimal(objItem.DiscountTax).ToString("c")
                                                            </td>
                                                        }
                                                    }

                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                            -@Convert.ToDecimal(totaldiscount).ToString("c")
                                                        </td>
                                                    }
                                                }
                                                else
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                            -@Convert.ToDecimal(objItem.Discount).ToString("c")
                                                        </td>
                                                    }
                                                }
                                            </tr>
                                        }
                                    }
                                    
                                    var transferItemDetail = 
                                        newInvoiceModel.Where(x => x.Item == "Transferred").ToList();
                                    
                                    if (transferItemDetail != null)
                                    {
                                        transferredFromUnitNumber = 
                                        (Model.TransferTenantUnitDetail != null ? 
                                        Model.TransferTenantUnitDetail.TranferFromUnitNumber : "");

                                        if (transferItemDetail.Any())
                                        {
                                            var colSpan = 5;
                                            colSpan = DisplayTax == "1" ? 5 : 3;
                                            colSpan = colSpan + multipleTaxHeaderCount;

                                            <tr>
                                                <td colspan="@colSpan" style="text-align:right;padding-top:1px;padding-bottom:1px;border-bottom:1px solid #ddd;border-collapse:collapse;line-height:1.5;"></td>
                                            </tr>

                                            <tr>
                                                @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                {
                                                    <td style="text-align:left;padding-top:1px;padding-bottom:1px;"></td>
                                                }

                                                @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                                {
                                                    if (DisplayTax == "0")
                                                    {
                                                        <td style="font-size:10px;font-family:arial;text-align:right;font-weight:bold;padding-left:70px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">Total</td>
                                                    }
                                                    else
                                                    {
                                                        <td style="text-align:right;padding-top:5px;padding-bottom:9px;"></td>
                                                    }
                                                }

                                                @if (DisplayTax == "1" && !isCblockersselfstorage)
                                                {
                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;"></td>
                                                    }

                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                                    {
                                                        if (IsEnabledMultipleTax && multipleTaxHeaderDet != null && multipleTaxHeaderCount > 0)
                                                        {
                                                            for (var td = 0; td < multipleTaxHeaderCount; td++)
                                                            {
                                                                if (td == multipleTaxHeaderCount - 1)
                                                                {
                                                                    <td style="font-size:10px;font-family:arial;text-align:right;font-weight:bold;padding-left:70px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">Total</td>
                                                                }
                                                                else
                                                                {
                                                                    <td style="text-align:right;padding-top:1px;padding-bottom:1px;"></td>
                                                                }

                                                            }
                                                        }
                                                        else
                                                        {
                                                            <td style="font-size:10px;font-family:arial;text-align:right;font-weight:bold;padding-left:70px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">Total</td>
                                                        }
                                                    }

                                                    if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                    {
                                                        <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(individualTotal).ToString("c")</td>
                                                    }
                                                }
                                                else
                                                {
                                                    if (isCblockersselfstorage)
                                                    {
                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                        {
                                                            <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(individualSubTotal).ToString("c")</td>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                        {
                                                            <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(individualTotal).ToString("c")</td>
                                                        }
                                                    }

                                                }
                                            </tr>
                                            <tr>
                                                <td colspan="@colSpan" style="text-align:right;padding-top:1px;padding-bottom:1px;"></td>
                                            </tr>
                                            <tr>
                                                <td colspan="@colSpan" style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;border-bottom:1px solid #ddd;border-collapse:collapse;line-height:1.5;">
                                                    @Html.Raw(Model.GetDictionaryItem( "DisplayTransferUnitNumber"))   @transferredFromUnitNumber    @Html.Raw(Model.GetDictionaryItem( "DisplayItemizedTransferDetail"))
                                                </td>
                                            </tr>

                                            totalTranferedAmt = 0;
                                            var recordCount = transferItemDetail.Count();
                                            transferItemDetail = transferItemDetail.OrderBy(x => x.OrderNo).ToList();
                                            for (int index = 0; index < recordCount; index++)
                                            {
                                                isTrasferred = true;
                                                var objItem = transferItemDetail[index];
                                                var invoiceItemTaxDet = new List<InvoiceAppliedTaxDetail>();

                                                if (IsEnabledMultipleTax && Model.InvoiceAppliedTaxDetails != null)
                                                {
                                                    objItem.ItemId = objItem.ItemId ?? Guid.Empty;

                                                    if (objItem.SubCategory != "invoicebalance" && objItem.SubCategory != "appliedcredit")
                                                    {
                                                        invoiceItemTaxDet = Model.InvoiceAppliedTaxDetails.Where(xx => xx.ItemServiceId == objItem.ItemServiceId && xx.ContractId == objItem.ContractID).ToList();
                                                    }
                                                    else
                                                    {
                                                        if (objItem.SubCategory != "invoicebalance")
                                                        {
                                                            invoiceItemTaxDet = Model.InvoiceAppliedTaxDetails.Where(xx => xx.ItemServiceId == objItem.ItemServiceId && xx.InvoiceItemCategory == "APPLIEDCREDIT").ToList();
                                                        }
                                                        else
                                                        {
                                                            invoiceItemTaxDet = Model.InvoiceAppliedTaxDetails.Where(xx => xx.ItemServiceId == objItem.ItemServiceId && xx.InvoiceItemCategory != "APPLIEDCREDIT").ToList();
                                                        }
                                                    }
                                                }

                                                if (objItem.Price != 0 || (objItem.SubCategory == "appliedcredit" && objItem.totAmt < 0 && objItem.Price == 0))
                                                {
                                                    // Prakash added this  code on 28-05-2019. regardig multiple tax full invoice
                                                    // mid period prorate invoice balance displaying without tax.full paid invoice detail , I unable to get
                                                    // prorate item tax detail because , prorate tax based on the reoccuring invoice item which
                                                    // we are displaying in the refund detail
                                                    if (IsEnabledMultipleTax && invoiceItemTaxDet != null)
                                                    {
                                                        if (!invoiceItemTaxDet.Any())
                                                        {
                                                            objItem.Price = Convert.ToDecimal(objItem.Price) + Convert.ToDecimal(objItem.Tax);
                                                        }
                                                    }

                                                    individualSubTotal = individualSubTotal + Convert.ToDecimal(objItem.Price);
                                                    individualTotal = DisplayTax == "1" ? (individualTotal + Convert.ToDecimal(objItem.totAmt)) : (individualTotal + Convert.ToDecimal(objItem.Price));
                                                    individualTaxTotal = individualTaxTotal + Convert.ToDecimal(objItem.Tax);
                                                    var objectDescription = objItem.Description;
                                                    totalTranferedAmt = totalTranferedAmt + Convert.ToDecimal(objItem.totAmt);
                                                    objectDescription = objectDescription.Replace("Invoice", Model.GetDictionaryItem( "DisplayLabelHeaderInvoiceNumber"));
                                                    objectDescription = objectDescription.Replace("Unit Rent charge transferred", Model.GetDictionaryItem( "Unit_Rent_Transferred"));
                                                    objectDescription = objectDescription.Replace("Deposit charge transferred", Model.GetDictionaryItem( "Deposit_transferred"));

                                                    <tr style="text-align:center; padding-top: 9px; padding-bottom: 9px; padding-left: 5px;">
                                                        @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                        {
                                                            <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                                @objectDescription
                                                            </td>
                                                        }

                                                        @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                                        {

                                                            var textalign = isCblockersselfstorage ? "text-align:right" : "text-align:center";
                                                            <td style="@textalign;padding-top:1px;padding-bottom:1px;">
                                                                @objItem.ItemQty
                                                            </td>
                                                        }

                                                        @if (DisplayTax == "1" && !isCblockersselfstorage)
                                                        {
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                    @Convert.ToDecimal(objItem.Price).ToString("c")
                                                                </td>
                                                            }
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                                            {
                                                                if (IsEnabledMultipleTax && multipleTaxHeaderDet != null && multipleTaxHeaderCount > 0)
                                                                {

                                                                    for (var td = 0; td < multipleTaxHeaderCount; td++)
                                                                    {
                                                                        var itemTaxdet = invoiceItemTaxDet != null ? invoiceItemTaxDet.FirstOrDefault(xx => xx.TaxMasterId == multipleTaxHeaderDet[td].Id) : null;
                                                                        if (itemTaxdet != null)
                                                                        {
                                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                                @Convert.ToDecimal(itemTaxdet.TaxAmount).ToString("c")
                                                                            </td>
                                                                        }
                                                                        else
                                                                        {
                                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                                @Convert.ToDecimal(0).ToString("c")
                                                                            </td>
                                                                        }
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                        @Convert.ToDecimal(objItem.Tax).ToString("c")
                                                                    </td>
                                                                }

                                                            }
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                                    @Convert.ToDecimal(objItem.totAmt).ToString("c")
                                                                </td>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                                    @Convert.ToDecimal(objItem.Price).ToString("c")
                                                                </td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                                if (objItem.Discount > 0)
                                                {
                                                    var totaldiscount = (objItem.Discount ?? 0) + (objItem.DiscountTax ?? 0);
                                                    individualTaxTotal = individualTaxTotal - (objItem.DiscountTax ?? 0);
                                                    individulaDiscountTotal = individulaDiscountTotal + totaldiscount;
                                                    individualTotal = individualTotal - totaldiscount;
                                                    individualSubTotal = individualSubTotal - (objItem.Discount ?? 0);
                                                    totalTranferedAmt = totalTranferedAmt - totaldiscount;

                                                    <tr style="text-align:center; padding-top: 9px; padding-bottom: 9px; padding-left: 5px;" class="page-break">
                                                        @{
                                                            var objDescription = objItem.Item == "Rent" ? objOverallConfigData.clientAppAndDocumentConfig.AdvancePaymentDiscount : objItem.Description;
                                                        }
                                                        @if (objItem.Item != "Refund")
                                                        {
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                            {
                                                                <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                                    @objDescription
                                                                    @if (Model.GetDictionaryVisibleStatus( "DisplayAdjustedThruAdvanceDiscount"))
                                                                    {
                                                                        @Html.Raw(Model.GetDictionaryItem( "DisplayAdjustedThruAdvanceDiscount"))
                                                                    }
                                                                </td>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                                            {
                                                                <td style="text-align:left;padding-top:1px;padding-bottom:1px;">
                                                                    @objDescription
                                                                </td>
                                                            }
                                                        }

                                                        @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                                        {
                                                            <td style="text-align:right;padding-top:5px;padding-bottom:9px;"></td>
                                                        }

                                                        @if (DisplayTax == "1")
                                                        {
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                    -@Convert.ToDecimal(objItem.Discount).ToString("c")
                                                                </td>
                                                            }
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                                            {

                                                                if (IsEnabledMultipleTax && multipleTaxHeaderDet != null && multipleTaxHeaderCount > 0)
                                                                {

                                                                    for (var td = 0; td < multipleTaxHeaderCount; td++)
                                                                    {
                                                                        var itemTaxdet = invoiceItemTaxDet != null ? invoiceItemTaxDet.FirstOrDefault(xx => xx.TaxMasterId == multipleTaxHeaderDet[td].Id) : null;
                                                                        if (itemTaxdet != null)
                                                                        {
                                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                                -@Convert.ToDecimal(objItem.DiscountTax).ToString("c")
                                                                            </td>
                                                                        }
                                                                        else
                                                                        {
                                                                            if (!string.IsNullOrEmpty(objItem.SubCategory) && td == 0)
                                                                            {
                                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                                    @Convert.ToDecimal(objItem.Tax).ToString("c")
                                                                                </td>
                                                                            }
                                                                            else
                                                                            {
                                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                                    @Convert.ToDecimal(0).ToString("c")
                                                                                </td>
                                                                            }
                                                                        }
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                        -@Convert.ToDecimal(objItem.DiscountTax).ToString("c")
                                                                    </td>
                                                                }

                                                            }
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">
                                                                    -@Convert.ToDecimal(totaldiscount).ToString("c")
                                                                </td>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                                            {
                                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                                                    -@Convert.ToDecimal(objItem.Discount).ToString("c")
                                                                </td>
                                                            }
                                                        }
                                                    </tr>
                                                }
                                            }
                                        }

                                    }
                                    {
                                        #region Thirdparty insurance from Total Invoice amount
                                        if (newInvoiceModel.Any(x => x.Item == "Insurance"))
                                        {
                                            var insModel = newInvoiceModel.FirstOrDefault(x => x.Item == "Insurance" && x.isThirdParty == false);
                                            if (insModel != null)
                                            {
                                                if (insModel.Tax > 0)
                                                {
                                                    iptAmnt = Convert.ToDecimal(insModel.Tax);
                                                    iptAvailable = true;
                                                    individualTaxTotal += iptAmnt;
                                                    iptMessage = "IPT Included";
                                                    individualSubTotal -= iptAmnt;
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    @*Prakash added this code for multiple tax invoicing purpose. start on 18-04-2019. sprint 30*@
                                    if (IsEnabledMultipleTax)
                                    {
                                        <tr style="text-align:center; padding-top: 9px; padding-bottom: 9px; font-weight:bold; padding-left: 5px;" class="page-break">
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueItem"))
                                            {
                                                var InvoiceRoundOffAmount = Model.InvoiceDetail.RoundOffValue;
                                                if (InvoiceRoundOffAmount > 0)
                                                {
                                                    <td style="text-align:left;padding-top:1px;padding-bottom:1px;text-align:right; "> @Html.Raw(totalWithroundofflabelText) </td>
                                                }
                                                else
                                                {
                                                    <td style="text-align:left;padding-top:1px;padding-bottom:1px;text-align:right; "> @*Total*@ @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueTotal")) </td>
                                                }
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueQuantity"))
                                            {
                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;"></td>
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueNetCost"))
                                            {
                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">@individualSubTotal.ToString("c")</td>
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                            {
                                                if (Model.InvoiceAppliedTaxDetails != null)
                                                {
                                                    var totalInvItemTaxList = Model.InvoiceAppliedTaxDetails.GroupBy(xx => new { xx.TaxMasterId, xx.TaxPercentage, xx.TaxName }).
                                                                    Select(g => new
                                                                    {
                                                                        TaxName = g.Key.TaxName,
                                                                        TaxPercentage = g.Key.TaxPercentage,
                                                                        TaxAmt = g.Sum(xx => xx.TaxAmount),
                                                                        DiscontTax = g.Sum(xx => xx.DiscountTax)
                                                                    }).ToList();
                                                    if (totalInvItemTaxList.Any())
                                                    {
                                                        totalInvItemTaxList = totalInvItemTaxList.OrderBy(xx => xx.TaxName).ToList();

                                                        foreach (var sum in totalInvItemTaxList)
                                                        {
                                                            decimal mulTotalTax = sum.TaxAmt - sum.DiscontTax;
                                                            <td style="text-align:right;padding-top:1px;padding-bottom:1px;">@Convert.ToDecimal(mulTotalTax).ToString("c")</td>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <td style="text-align:right;padding-top:1px;padding-bottom:1px;">@individualTaxTotal.ToString("c")</td>
                                                    }
                                                }
                                            }
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueGrossCost"))
                                            {
                                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:6px;">@individualTotal.ToString("c")</td>
                                            }
                                        </tr>
                                    }
                                    @*Prakash added this code for multiple tax invoicing purpose. End*@
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
        </table>
    </div>

    <table>
        @*unneccessary code removed by prakash on sprint 22 07-11-2018.*@
        @{
            var InvoiceTotal = individualTotal;
            var invoiceRoundOffAmount = Model.InvoiceDetail.RoundOffValue;
            var IndividualTaxTotal = individualTaxTotal;
            
            if (Model.InvoiceDetail.Advance != null)
            {
                Model.InvoiceDetail.TotalInvAmt = Model.InvoiceDetail.TotalInvAmt + 
                    Convert.ToDecimal(Model.InvoiceDetail.Advance);
            }
            
            Model.InvoiceDetail.TotalInvAmt = 
                Model.IsCreditNoteInvoice ? (-1) * Model.InvoiceDetail.AppliedCreditAmount : 
                Model.InvoiceDetail.TotalInvAmt;
            
            // code changed by prakash , after invoice generation I have enabled round off functionality then I'm regenerating invoice pdf by making pdf path null then in this code will should with rounded off value
            // that is reason I have commentted this Storagebase.Helper.JQueryUIDatePickerHelper.GetRoundingoffValue(Convert.ToDecimal(Model.InvoiceDetail.TotalInvAmt)) method.
            var roundingoffValueCurrentInvoice = Convert.ToDecimal(Model.InvoiceDetail.TotalInvAmt);  ///Storagebase.Helper.JQueryUIDatePickerHelper.GetRoundingoffValue(Convert.ToDecimal(Model.InvoiceDetail.TotalInvAmt));// Prakash

            var totalTransferredAmount = totalTranferedAmt;
            var balanceafterTranferred = Convert.ToDecimal(individualTotal);
            string multipleTaxSummaryText = String.Empty;

            //changes by shiva for client document store and park they want to space in round of values
            var invoiceTotalSpace = (Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB"
               || Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8"
               || Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596"
               || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB"
               || Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88"
               || Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA"
               || Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F") ? 
               "margin-top:8px;margin-bottom:8px" : "";
            
            //added by shiva for clientdocument M and z storage want to space in note term conditions
            var summaryNotespace = (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8"
               || Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD"
               || Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB"
               || Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596"
               || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB"
               || Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88"
               || Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA"
               || Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F") ? 
               "padding-top:15px;padding-bottom:17px" : "";
        }

        @*code for displaying total transferred amount*@
        @if (isTrasferred && Model.GetDictionaryVisibleStatus( "DisplayTranferAmount"))
        {
            if (!IsEnabledMultipleTax)
            {
                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right">
                            <tbody>
                                <tr>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">@Html.Raw(Model.GetDictionaryItem( "DisplayTranferAmount"))</td>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(totalTranferedAmt).ToString("c")</td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>

                if (isCblockersselfstorage)
                {
                    <tr>
                        <td colspan="2" style="width:100%;"></td>
                        <td colspan="6">
                            <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                                <tbody>
                                    <tr>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">
                                            @*Total With out round off value.*@
                                            @Html.Raw(totalWithroundofflabelText)
                                        </td>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(individualSubTotal).ToString("c")</td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2" style="width:100%;"></td>
                        <td colspan="6">
                            <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                                <tbody>
                                    <tr>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">
                                            @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDueTaxPercent"))
                                            {
                                                @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDueTaxPercent")) @*@TaxOrVat*@
                                            }
                                        </td>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(IndividualTaxTotal).ToString("c")</td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            }
        }

        @if (Model.GetDictionaryVisibleStatus( "DisplayTermsConditions"))
        {
            //added by shiva for clientdocument M and z storage want to space in note term conditions
            var space = (Convert.ToString(loginclientId).ToUpper() == "5E824297-5808-4C04-8F4B-D82D043F6DD8"
                || Convert.ToString(loginclientId).ToUpper() == "D738C95B-1AAF-4FA3-BB16-8ABD783C11BD"
                || Convert.ToString(loginclientId).ToUpper() == "34B0CD04-3D8C-48D2-91A8-D5740290A7DB"
                || Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596"
                || Convert.ToString(loginclientId).ToUpper() == "F796A71D-54ED-4CFD-99DC-ABDAE4A27CAB"
                || Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88"
                || Convert.ToString(loginclientId).ToUpper() == "02C3394D-1C07-445C-A1EA-EF49773D88BA"
                || Convert.ToString(loginclientId).ToUpper() == "1440AB2F-4FD9-4497-BBF2-B2A25CB0916F") ? "padding-top:15px;padding-bottom:17px" : "";
            <tr>
                <td colspan="5" align="center" style="font-size:12px!important;font-weight:normal;font-family:arial;@summaryNotespace">
                    @Html.Raw(Model.GetDictionaryItem( "DisplayTermsConditions")) @*Please note terms &amp; conditions apply*@
                </td>
            </tr>
        }

        @if (isTrasferred == true && Model.GetDictionaryVisibleStatus( "DisplayTranferBalance"))
        {
            <tr>
                <td colspan="2" style="width:100%;"></td>
                <td colspan="6">
                    <table align="right" style="border:1px solid #ddd;">
                        <tbody>
                            <tr>
                                <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;"> @Html.Raw(Model.GetDictionaryItem( "DisplayTranferBalance"))</td>
                                <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(balanceafterTranferred).ToString("c")</td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
        }

        @if (Model.GetDictionaryVisibleStatus( "DisplayCurrentDue") && isTrasferred == false)
        {
            //started Prakash added this code for display Rounded off value  on 07-11-2018. Sprint 22 started

            if ((EnableInvoiceRoundoffValue == "1" && invoiceRoundOffAmount != 0) && !isCblockersselfstorage)
            {
                if (!IsEnabledMultipleTax)
                {
                    <tr>
                        <td colspan="2" style="width:100%;"></td>
                        <td colspan="6">
                            <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                                <tbody>
                                    <tr>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">
                                            @*Total With out round off value.*@
                                            @Html.Raw(totalWithroundofflabelText)
                                        </td>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(individualTotal).ToString("c")</td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>

                    //added by shiva for total tax displaying
                    if (Model.GetDictionaryVisibleStatus( "SlmInv_TotalTax"))
                    {
                        <tr>
                            <td colspan="2" style="width:100%;"></td>
                            <td colspan="6">
                                <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                                    <tbody>
                                        <tr>
                                            <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">
                                                @if (Model.GetDictionaryVisibleStatus( "SlmInv_TotalTax"))
                                                {
                                                    @Html.Raw(Model.GetDictionaryItem( "SlmInv_TotalTax")) @*Total Tax*@
                                                }
                                            </td>
                                            <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(IndividualTaxTotal).ToString("c")</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                }

                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                            <tbody>
                                <tr>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">@Html.Raw(roundofflabelText)</td>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(invoiceRoundOffAmount).ToString("c")</td>
                                </tr>

                            </tbody>
                        </table>
                    </td>
                </tr>
            }

            if (isCblockersselfstorage)
            {
                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                            <tbody>
                                <tr>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">
                                        @*Total With out round off value.*@
                                        @Html.Raw(totalWithroundofflabelText)
                                    </td>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(individualSubTotal).ToString("c")</td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                            <tbody>
                                <tr>
                                    @if (Model.GetDictionaryVisibleStatus( "SlmInv_TotalTax"))
                                    {
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">
                                            @Html.Raw(Model.GetDictionaryItem( "SlmInv_TotalTax")) @*@TaxOrVat*@
                                        </td>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(IndividualTaxTotal).ToString("c")</td>
                                    }
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>

                if (EnableInvoiceRoundoffValue == "1" && invoiceRoundOffAmount != 0)
                {
                    <tr>
                        <td colspan="2" style="width:100%;"></td>
                        <td colspan="6">
                            <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                                <tbody>
                                    <tr>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">@Html.Raw(roundofflabelText)</td>
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(invoiceRoundOffAmount).ToString("c")</td>
                                    </tr>

                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            }

            //end Prakash added this code for display Rounded off value  on 07-11-2018. Sprint 22 End
            if (!IsEnabledMultipleTax || (EnableInvoiceRoundoffValue == "1" && invoiceRoundOffAmount != 0))
            {
                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right" style="@invoiceTotalSpace;border:1px solid #ddd;">
                            <tbody>
                                <tr>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">@*Total*@  @Html.Raw(Model.GetDictionaryItem( "DisplayCurrentDue"))</td>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(roundingoffValueCurrentInvoice).ToString("c")</td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        }

        @{
            var FinalAmount = (roundingoffValueCurrentInvoice - adjustamount);
        }

        @if (Model.GetDictionaryVisibleStatus( "DisplayAdjustedThruAdvance") && isTrasferred == false)
        {
            if (adjustamount > 0)
            {
                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right" style="border:1px solid #ddd;">
                            <tbody>
                                <tr>
                                    @if (invoiceDetail.Category == "INVOICE-MOVEIN")
                                    {
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;"> Reservation fee applied</td>
                                    }
                                    else
                                    {
                                        <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;"> @Html.Raw(Model.GetDictionaryItem( "DisplayAdjustedThruAdvance")) @*Amount Adjusted through Advance*@</td>
                                    }
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;"><span>-</span>@Convert.ToDecimal(adjustamount).ToString("c")</td>

                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            }

            if (adjustamount > 0)
            {
                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right" style="border:1px solid #ddd;">
                            <tbody>
                                <tr>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">@Html.Raw(Model.GetDictionaryItem( "DisplayAdjustedAdvanceBalanceText"))@*Balance*@</td>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;">@Convert.ToDecimal(FinalAmount).ToString("c")</td>

                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            }

        }

        @if (Model.GetDictionaryVisibleStatus( "DisplayPaymentDueon"))
        {
            <tr>
                <td colspan="2" style="width:100%;"></td>
                <td colspan="6">
                    <table align="right" style="border:1px solid #ddd;margin-top:8px;">
                        <tbody>
                            <tr>
                                <td style="font-size:10px;font-family:arial;font-weight:bold;padding-right:80px;padding-top:8px;white-space:nowrap;padding-bottom:8px;">@Html.Raw(Model.GetDictionaryItem( "DisplayPaymentDueon"))</td>
                                <td style="font-size:10px;font-family:arial;font-weight:normal;text-align:right;font-weight:bold;white-space:nowrap;">@invoiceDueDate</td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            </tr>
        }

        @if (Model.LeaseInvoicePastDue == null)
        {
            Model.LeaseInvoicePastDue = new List<LeaseInvoicePastDue>();
        }

        @if (Model.LeaseInvoicePastDue.Count() > 0)
        {
            //added by shiva for client document komora they want to past due balance want border
            var tblborder = (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8" || 
            Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88") ? 
            "border=1" : "border=0";
            
            var tblbordercolor = (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8" || 
            Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88") ? 
            "border: 1px solid #000 !important" : "border: 1px solid #ddd !important";
            
            <table id="tblPastDueTable" style="width: 100%;@tblbordercolor; margin-bottom: 10px;border-collapse: collapse; page-break-inside: auto;" @tblborder>
                @if (displayPastDueTop == false)
                {
                    if (Model.GetDictionaryVisibleStatus( "DisplayPastDueText"))
                    {
                        <span id="spnPastDueText"> @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueText"))</span>
                    }
                    @*@if (Model.LeaseInvoicePastDue.Count() > 0)
                        {*@

                    <tr style="page-break-before: auto; page-break-after: auto; background: #eee;">

                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueUnitnumber"))
                        {
                            <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueUnitnumber"))
                            </th>
                        }
                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueInvoicePeriod"))
                        {
                            <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueInvoicePeriod"))    @*Invoice Period*@
                            </th>
                        }
                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueBalance"))
                        {
                            <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueBalance"))    @*Balance*@
                            </th>
                        }
                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueLatefee"))
                        {
                            <th style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                @*LateFee*@  @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueLatefee"))
                            </th>
                        }
                        @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueTotal"))
                        {
                            <th style="text-align:right;padding-top:1px;padding-bottom:1px;padding-right:15px;">
                                @*Total*@@Html.Raw(Model.GetDictionaryItem( "DisplayPastDueTotal"))
                            </th>
                        }
                    </tr>

                    foreach (var item in Model.LeaseInvoicePastDue)
                    {
                        <tr style="page-break-before:auto;page-break-after:auto;">
                            @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueUnitnumber"))
                            {
                                <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                    @item.UnitNumber
                                </td>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueInvoicePeriod"))
                            {
                                var invoicetoDate = "-";
                                var invoicefromDate = "-";
                                if ((Convert.ToDateTime(item.InvoiceToDate).ToShortDateString() != "1/1/0001") && (Convert.ToDateTime(item.InvoiceToDate).ToShortDateString() != null) && (Convert.ToDateTime(item.InvoiceToDate).ToShortDateString() != "01/01/0001") && Convert.ToDateTime(item.InvoiceToDate) != DateTime.MinValue)
                                {
                                    invoicetoDate = Convert.ToDateTime(item.InvoiceToDate).ToShortDateString();
                                }
                                if ((Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString() != "1/1/0001") && (Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString() != null) && (Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString() != "01/01/0001") && Convert.ToDateTime(item.InvoiceFromDate) != DateTime.MinValue)
                                {
                                    invoicefromDate = Convert.ToDateTime(item.InvoiceFromDate).ToShortDateString();
                                }

                                <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                    @invoicetoDate - @invoicefromDate
                                </td>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueBalance"))
                            {
                                <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                    @Convert.ToDecimal(item.Balance).ToString("c")
                                </td>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueLatefee"))
                            {
                                <td style="text-align:center;padding-top:1px;padding-bottom:1px;">
                                    @Convert.ToDecimal(item.LatefeebyBalance).ToString("c")
                                </td>
                            }
                            @if (Model.GetDictionaryVisibleStatus( "DisplayPastDueTotal"))
                            {
                                <td style="text-align:right;padding-top:1px;padding-bottom:1px;">
                                    @{

                                        SubUnpaidTotal = Convert.ToDecimal(item.Balance) + Convert.ToDecimal(item.LatefeebyBalance);
                                        PastDue += Convert.ToDecimal(SubUnpaidTotal);
                                    }
                                    @SubUnpaidTotal.ToString("c")
                                </td>
                            }
                        </tr>
                    }

                    if (Model.GetDictionaryVisibleStatus( "DisplayPastDueBalanceAmount"))
                    {
                        <table>
                            <tr style=" border: 1px solid #ddd;">
                                <td style="visibility:hidden;width:30%;"></td>
                                <td style="visibility:hidden;width:35%;"></td>
                                <td colspan="2" style="text-align: left; border-left:1px solid #ddd; font-weight: bold; padding-top: 9px; border-left: 1px solid #ddd; border-right: 1px solid white !important; padding-bottom: 9px;">
                                    @*Total Past Due*@
                                    @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueBalanceAmount"))
                                </td>
                                <td colspan="3" style="text-align: right; padding-top: 9px; padding-bottom: 9px; border-right: 1px solid #ddd;">
                                    @PastDue.ToString("c")

                                </td>
                            </tr>
                        </table>
                    }
                }
            </table>
        }
        @{
            decimal TotalValue = 0;
            if (adjustamount > 0)
            {
                TotalValue = FinalAmount;
            }
            else
            {
                TotalValue = roundingoffValueCurrentInvoice;//variable name changed by prakash on sprint 22 07-11-2018.
            }
            if (PastDue > 0)
            {
                TotalValue += PastDue;
            }
            // Prakash commentted this code during sprint 22 on 07-11-2018. Reason Pastdue balance should not again round method.
            //var RoundingoffTotalvalue = Storagebase.Helper.JQueryUIDatePickerHelper.GetRoundingoffValue(TotalValue);
        }

        <tr>
            <td height="20">
                &nbsp;
            </td>
        </tr>


        @if (PastDue > 0)
        {
            if (Model.GetDictionaryVisibleStatus( "DisplayPastDueTotalamountDue"))
            {
                <tr>
                    <td colspan="2" style="width:100%;"></td>
                    <td colspan="6">
                        <table align="right" style="width:100%;margin-right:0px;">
                            <tbody>
                                <tr style="border:1px solid #ddd;">
                                    <td style="visibility: hidden; width: 30%;"></td>
                                    <td style="visibility: hidden; width: 35%;"></td>
                                    <td style="font-size:10px;font-family:arial;border:1px solid #ddd;border-right:1px solid #fff; font-weight:bold;text-align:left; padding-right:15px;padding-top:8px;white-space:nowrap;padding-bottom:9px;">
                                        @Html.Raw(Model.GetDictionaryItem( "DisplayPastDueTotalamountDue"))@*Total due*@
                                    </td>
                                    <td style="font-size:10px;font-family:arial;font-weight:bold;text-align:right;white-space:nowrap;border:1px solid #ddd;border-left:1px solid #fff;width: 15%;">@Convert.ToDecimal(TotalValue).ToString("c")</td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
        }

        @{
            var displayType = "none";
            var displayPaymentType = "none";
            if (DisplayBankDetails == "1")
            {
                displayType = "table-cell";
                displayPaymentType = "block";
            }
        }
        <tr>
            <td height="20">
                &nbsp;
            </td>
        </tr>
    </table>
    @{
        var displayNoteAtLast = Model.GetDictionaryVisibleStatus( "DisplayNoteAtLast");
    }

    @if (displayNoteAtLast == false)
    {

        if (Model.GetDictionaryVisibleStatus( "DisplayNoteForInvoice"))
        {
            var htmlContent = Model.GetDictionaryItem( "DisplayNoteForInvoice");
            <div>
                @Html.Raw(htmlContent)
            </div>
        }
    }

    @if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8" || Convert.ToString(loginclientId).ToUpper() == "5700664A-16CA-435A-ABC4-190B5E5CFD10" || Convert.ToString(loginclientId).ToUpper() == "ED1C8BBD-C94E-4B68-A1E1-25580D343337")
    {
        <div>
            <span height="20" style="font-size:11px;">
                &nbsp;
            </span>
        </div>
        <span style="font-size:11px;font-family:arial;font-weight:bold;display: table-header-group;">Цей рахунок є одночасно актом виконаних робіт (наданих послуг) за розрахунковий період: @InvoiceFromDate-@invoiceToDate</span>
        <div>
            <span height="20" style="font-size:11px;">
                &nbsp;
            </span>
        </div>
    }

    <table style="width:100%" id="leasegridspan">
        <tr style="display:block;" id="remitTr">
            <td style="vertical-align:top; padding-bottom:20px;" id="remitTd">
                @if (Convert.ToString(loginclientId).ToLower() == "0c3bdd2b-00e2-4ba5-8253-146a2dc9978d")
                {
                    <table class="gridspan4">
                        <tbody>
                            @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymentto"))
                            {
                                <tr>

                                    <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;font-weight:bold;" id="remitpayTh">
                                        @*Remit Payment to*@
                                        @Html.Raw(Model.GetDictionaryItem( "DisplayRemitPaymentto"))
                                    </th>
                                </tr>
                            }

                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;padding-bottom:0px;" class="removewhite">
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoBusinessName") && !string.IsNullOrEmpty(documentConfig.InvoicePermitPayCompanyName))
                                    {
                                        <span> @Html.Raw(documentConfig.InvoicePermitPayCompanyName) <br /> </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoAddresssLine1") && !string.IsNullOrEmpty(remitaddress1))
                                    {
                                        <span> @Html.Raw(remitaddress1)  </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoAddresssLine2") && !string.IsNullOrEmpty(remitaddress2))
                                    {
                                        <span> @Html.Raw(remitaddress2) <br /> </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoCity") && !string.IsNullOrEmpty(remitcity))
                                    {
                                        <span> @Html.Raw(remitcity) </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoState") && !string.IsNullOrEmpty(remitstate))
                                    {
                                        <span> @Html.Raw(remitstate)  </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoCountry") && !string.IsNullOrEmpty(remitcountry))
                                    {
                                        <span> @Html.Raw(remitcountry) </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoZipCode") && !string.IsNullOrEmpty(documentConfig.InvoicePermitZipcode))
                                    {
                                        <span>   @documentConfig.InvoicePermitZipcode<br /> </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymentMobile") && !string.IsNullOrEmpty(documentConfig.InvoicePermitMobileNo))
                                    {
                                        <span> @documentConfig.InvoicePermitMobileNo </span>
                                    }

                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
                else
                {
                    <table class="gridspan4">
                        <tbody>
                            @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymentto"))
                            {
                                <tr>
                                    <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;font-weight:bold;" id="remitpayTh">
                                        @*Remit Payment to*@
                                        @Html.Raw(Model.GetDictionaryItem( "DisplayRemitPaymentto"))
                                    </th>
                                </tr>
                            }
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;padding-bottom:0px;" class="removewhite">
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoBusinessName") && !string.IsNullOrEmpty(documentConfig.InvoicePermitPayCompanyName))
                                    {
                                        <span> @Html.Raw(documentConfig.InvoicePermitPayCompanyName) <br /> </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoAddresssLine1") && !string.IsNullOrEmpty(remitaddress1))
                                    {
                                        <span> @Html.Raw(remitaddress1) <br /> </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoAddresssLine2") && !string.IsNullOrEmpty(remitaddress2))
                                    {
                                        <span> @Html.Raw(remitaddress2) <br /> </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoCity") && !string.IsNullOrEmpty(remitcity))
                                    {
                                        <span> @Html.Raw(remitcity), </span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoState") && !string.IsNullOrEmpty(remitstate))
                                    {
                                        <span> @Html.Raw(remitstate) </span>
                                    }

                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoZipCode") && !string.IsNullOrEmpty(documentConfig.InvoicePermitZipcode))
                                    {
                                        if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
                                        {
                                            <br />
                                        }
                                        <span>   @documentConfig.InvoicePermitZipcode<br /> </span>

                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymenttoCountry") && !string.IsNullOrEmpty(remitcountry))
                                    {
                                        <span> @Html.Raw(remitcountry)</span>
                                    }
                                    @if (Model.GetDictionaryVisibleStatus( "DisplayRemitPaymentMobile") && !string.IsNullOrEmpty(documentConfig.InvoicePermitMobileNo))
                                    {
                                        <br /> <br /><span> @documentConfig.InvoicePermitMobileNo </span>
                                    }
                                    @*@if (Convert.ToString(loginclientId).ToUpper() == "4D28184D-8942-42EE-984F-39ABEE023596")
                                        {
                                        <span>
                                            BIC:UNCRBGSF<br />
                                            IBAN: BG90 UNCR7000 1523 0846 90
                                        </span>
                                        }*@
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </td>

            @{
                // var objcontract = new Contracts();
                // var paymentdisplaytext = objcontract.GetClientPaymentDisplayText();

                List<ClientPaymentMode> paymentdisplaytext = Model.PaymentDisplayText;
                string StandingOrder = "StandingOrder";
                string OnlineBanking = "OnlineBanking";
                string MoneyOrder = "MoneyOrder";
                string CreditOrDebitCardTerminal = "CreditOrDebitCardTerminal";
                string CreditCard = "CreditCard";
                string Check = "Check";
                string Cash = "Cash";

                bool SI_IsDisplayBankInfo = Model.GetDictionaryVisibleStatus( "SI_IsDisplayBankInfo");
                bool SI_DisplayBankInfoForStandingOrder = Model.GetDictionaryVisibleStatus( "SI_DisplayBankInfoForStandingOrder");
                bool SI_DisplayBankInfoForOnlineBanking = Model.GetDictionaryVisibleStatus( "SI_DisplayBankInfoForOnlineBanking");
                bool SI_DisplayBankInfoForMoneyOrder = Model.GetDictionaryVisibleStatus( "SI_DisplayBankInfoForMoneyOrder");
                bool SI_DisplayBankInfoForCreditOrDebitCardTerminal = Model.GetDictionaryVisibleStatus( "SI_DisplayBankInfoForCreditOrDebitCardTerminal");
                bool SI_DisplayBankInfoForCreditCard = Model.GetDictionaryVisibleStatus( "SI_DisplayBankInfoForCreditCard");
                bool SI_DisplayBankInfoForCheck = Model.GetDictionaryVisibleStatus( "SI_DisplayBankInfoForCheck");
                bool SI_DisplayBankInfoForCash = Model.GetDictionaryVisibleStatus( "SI_DisplayBankInfoForCash");
                
                if (DisplayBankDetails == "1")
                {
                    if (SI_IsDisplayBankInfo)
                    {
                        string paymentType = Model.Paymenttype.Trim().Replace(" ", "");
                        foreach (var item in paymentdisplaytext)
                        {
                            if (item.ValueText == paymentType)
                            {
                                paymentType = item.DisplayText.Trim().Replace(" ", "");
                            }
                            if (item.ValueText.ToUpper() == Cash.ToUpper())
                            {
                                Cash = item.DisplayText.Trim().Replace(" ", "");
                            }
                            else if (item.ValueText.ToUpper() == Check.ToUpper())
                            {
                                Check = item.DisplayText.Trim().Replace(" ", "");
                            }
                            else if (item.ValueText.ToUpper() == CreditCard.ToUpper())
                            {
                                CreditCard = item.DisplayText.Trim().Replace(" ", "");
                            }
                            else if (item.ValueText.ToUpper() == CreditOrDebitCardTerminal.ToUpper())
                            {
                                CreditOrDebitCardTerminal = item.DisplayText.Trim().Replace(" ", "");
                            }
                            else if (item.ValueText.ToUpper() == MoneyOrder.ToUpper())
                            {
                                MoneyOrder = item.DisplayText.Trim().Replace(" ", "");
                            }
                            else if (item.ValueText.ToUpper() == OnlineBanking.ToUpper())
                            {
                                OnlineBanking = item.DisplayText.Trim().Replace(" ", "");
                            }
                            else if (item.ValueText.ToUpper() == StandingOrder.ToUpper())
                            {
                                StandingOrder = item.DisplayText.Trim().Replace(" ", "");
                            }
                        }

                        if ((SI_DisplayBankInfoForStandingOrder && paymentType.ToUpper() == StandingOrder.ToUpper()) ||
                                  (SI_DisplayBankInfoForOnlineBanking && paymentType.ToUpper() == OnlineBanking.ToUpper()) ||
                                  (SI_DisplayBankInfoForMoneyOrder && paymentType.ToUpper() == MoneyOrder.ToUpper()) ||
                                  (SI_DisplayBankInfoForCreditOrDebitCardTerminal && paymentType.ToUpper() == CreditOrDebitCardTerminal.ToUpper()) ||
                                  (SI_DisplayBankInfoForCreditCard && paymentType.ToUpper() == CreditCard.ToUpper()) ||
                                  (SI_DisplayBankInfoForCheck && paymentType.ToUpper() == Check.ToUpper()) ||
                                  (SI_DisplayBankInfoForCash && paymentType.ToUpper() == Cash.ToUpper()))
                        {
                            displayType = "table-cell";
                        }
                        else
                        {
                            displayType = "none";
                        }
                    }
                    else
                    {
                        displayType = "table-cell";
                    }
                }

                if (Convert.ToString(loginclientId).ToUpper() == "5ABB6129-BABB-401B-A1EB-29B70575D9F4")    //Need to display Bank Details in all the scenarios
                {
                    displayType = "table-cell";

                }
            }

            @*added by shiva for clientdocument komora they want to 2 bank address*@
            @if (Convert.ToString(loginclientId).ToUpper() == "67810EF0-6518-43E4-B9DF-5E28730321B8")
            {
                <td style="vertical-align:top;padding-left:30px;display:@displayType;">
                    <table class="gridspan4 acgridspan4" style="white-space:nowrap;">
                        <tbody>
                            <tr>
                                <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;padding-bottom:8px;" id="BankdetailsTd">
                                    Bank Details
                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    ТОВ "Комора СІЗ"
                                </th>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Банк
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>Приватбанк</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    ЄДРПОУ
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>42962474</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Призначення
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;" id="ibanTd">
                                    &nbsp;:&nbsp;&nbsp;<span>орендна плата за юніт №</span>
                                </td>
                            </tr>
                            @if (!string.IsNullOrEmpty(documentConfig.InvoiceIBAN))
                            {
                                <tr>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                        @Html.Raw(Model.GetDictionaryItem( "DisplayIBAN"))
                                    </td>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;" id="ibanTd">
                                        <span>:&nbsp; @documentConfig.InvoiceIBAN</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            }
            else if (Convert.ToString(loginclientId).ToLower() == "ed1c8bbd-c94e-4b68-a1e1-25580d343337")
            {
                <td style="vertical-align:top;padding-left:30px;display:@displayType;">
                    <table class="gridspan4 acgridspan4" style="white-space:nowrap;">
                        <tbody>
                            <tr>
                                <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;padding-bottom:8px;" id="BankdetailsTd">
                                    Bank Details
                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    ТОВ "Комора 25"
                                </th>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Банк
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>Приватбанк</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Рахунок
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>UA823052990000026007016221158</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    МФО
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>305299</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    ЄДРПОУ
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>43748038</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Призначення
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;" id="ibanTd">
                                    &nbsp;:&nbsp;&nbsp;<span>орендна плата за юніт №</span>

                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            }
            @*added by prasanth for clientdocument cblockers they want to 2 bank address*@
            else if (Convert.ToString(loginclientId).ToUpper() == "273470E5-2BB7-4667-907A-3E05B2A21867")
            {
                <td style="vertical-align:top;padding-left:30px;display:@displayType;">
                    <table class="gridspan4 acgridspan4">
                        <tbody>
                            <tr>
                                <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;padding-bottom:8px;" id="BankdetailsTd">
                                    Bank
                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    Siam Commercial Bank
                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    United Overseas Bank
                                </th>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    A/C Name
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>CB Lockers Limited</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;<span>CB Lockers Limited</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    A/C Number
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>226-2-08975-3</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;<span>729-3-26882-0</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Swift Code
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>SICOTHBK</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;<span>UOVBTHBK</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Branch
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>Bangrak</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;<span>Bangrak</span>
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </td>
            }
            else if ((Convert.ToString(loginclientId).ToUpper() == "C1B82609-8EA0-4C31-BB94-F6B8332749A6") && 
            appEnvironment == "LIVE")
            {
                <td style="vertical-align:top; padding-left:50px;display:none;">

                    <table class="gridspan4 acgridspan4">
                        <tbody>
                            <tr>
                                <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;padding-bottom:8px;" id="BankdetailsTd">
                                    800 Storage & Movers
                                </th>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Bank Name :
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    Abu Dhabi Commercial Bank
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Account Name :
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    ABDULAZIZ SELF STORAGE SVCS COM LLC
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Branch Name :
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    Dubai Mall
                                </td>
                            </tr>

                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Bank Swift Code :
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    ADCBAEAAXXX
                                </td>
                            </tr>

                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Account Number :
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;" id="ibanTd">
                                    11363646820001
                                </td>
                            </tr>

                            <tr>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    IBAN # :
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;" id="ibanTd">
                                    AE670030011363646820001
                                </td>
                            </tr>

                            <tr style="display:none;">
                                <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                    Account Type :
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;" id="ibanTd">
                                    CUR
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </td>
            }
            else if (Convert.ToString(loginclientId).ToUpper() == "5700664A-16CA-435A-ABC4-190B5E5CFD10")
            {
                <td style="vertical-align:top; padding-left:50px;">

                    <table class="gridspan4 acgridspan4">
                        <tbody>
                            <tr>
                                <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;padding-bottom:8px;" id="BankdetailsTd">

                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    Storage #31
                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    Storage #33 (sector2)
                                </th>
                            </tr>
                            <tr>
                                <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;padding-bottom:8px;" id="BankdetailsTd">
                                    Bank Details
                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    ТОВ "Комора 31"
                                </th>
                                <th style="text-decoration: underline; text-align: left; font-family: arial; font-size: 9px; padding-bottom: 8px; padding-left:15px;" id="BankdetailsTd">
                                    СПД Махневич В.В.
                                </th>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Банк
                                </td>

                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>Приватбанк</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>Приватбанк</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Рахунок
                                </td>

                                <td style="font-size:9px;font-family:arial;font-weight:normal;white-space:nowrap;">
                                    &nbsp;:&nbsp;&nbsp;<span>UA55 305299 00000 26008026224832</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;white-space:nowrap;">
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>UA 26 305299 00000 26003010113824</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    МФО
                                </td>

                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>305299</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>321842</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Код отримувача
                                    ЄДРПОУ
                                </td>

                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span> 42672450</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>3093017009</span>
                                </td>
                            </tr>
                            <tr>
                                <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                    Призначення
                                </td>

                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;:&nbsp;&nbsp;<span>орендна плата за юніт №</span>
                                </td>
                                <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>орендна плата за юніт №</span>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </td>
            }
            else
            {
                <td style="vertical-align:top; padding-left:50px; display:@displayType;">
                    <table class="gridspan4 acgridspan4">
                        <tbody>
                            <tr>
                                @if (Model.GetDictionaryVisibleStatus( "DisplayBankdetails"))
                                {
                                    <th style="text-decoration:underline;text-align:left !important;font-family:arial;font-size:9px;padding-bottom:8px;" id="BankdetailsTd">
                                        @*Bank Details*@

                                        @Html.Raw(Model.GetDictionaryItem( "DisplayBankdetails"))
                                    </th>
                                }
                            </tr>
                            @if (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                            {
                                <tr>
                                    <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                        Отримувач
                                    </td>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                        <span>:&nbsp; Алоні Геннадiй </span>
                                    </td>
                                </tr>
                            }
                            <tr>
                                @if (Model.GetDictionaryVisibleStatus( "DisplayAccountNumber"))
                                {
                                    <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                        @*Account Number*@
                                        @Html.Raw(Model.GetDictionaryItem( "DisplayAccountNumber"))
                                    </td>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                        @if (!string.IsNullOrEmpty(documentConfig.InvoiceAccountNumber))
                                        {
                                            <span>:&nbsp; @documentConfig.InvoiceAccountNumber</span>
                                        }
                                    </td>
                                }
                            </tr>
                            <tr>
                                @if (Model.GetDictionaryVisibleStatus( "DisplaySortcode"))
                                {
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                        @*Sort Code*@
                                        @*Routing Number*@
                                        @Html.Raw(Model.GetDictionaryItem( "DisplaySortcode"))
                                    </td>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                        @if (!string.IsNullOrEmpty(documentConfig.InvoiceSortCode))
                                        {
                                            <span>:&nbsp; @documentConfig.InvoiceSortCode</span>
                                        }
                                    </td>
                                }
                            </tr>
                            @{
                                var displayswift = "none";
                                var displayiban = "none";

                                if (string.IsNullOrWhiteSpace(documentConfig.InvoiceSwiftOrBIC) &&
                                string.IsNullOrWhiteSpace(documentConfig.InvoiceIBAN))
                                {
                                    displayswift = "none";
                                    displayiban = "none";
                                }
                                else
                                {
                                    displayswift = "table-row";
                                    displayiban = "table-row";
                                }

                            }
                            @if (Model.GetDictionaryVisibleStatus( "DisplaySwiftBICCode"))
                            {
                                <tr>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                        @*SWIFT / BIC*@
                                        @Html.Raw(Model.GetDictionaryItem( "DisplaySwiftBICCode"))
                                    </td>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                        @if (!string.IsNullOrEmpty(documentConfig.InvoiceSwiftOrBIC))
                                        {
                                            <span>:&nbsp; @documentConfig.InvoiceSwiftOrBIC</span>
                                        }
                                    </td>
                                </tr>
                            }

                            @if (Model.GetDictionaryVisibleStatus( "DisplayIBAN"))
                            {
                                <tr>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;text-align:left;">
                                        @*IBAN*@
                                        @Html.Raw(Model.GetDictionaryItem( "DisplayIBAN"))
                                    </td>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;" id="ibanTd">
                                        @if (!string.IsNullOrEmpty(documentConfig.InvoiceIBAN))
                                        {
                                            <span>:&nbsp; @documentConfig.InvoiceIBAN</span>
                                        }
                                    </td>
                                </tr>
                            }
                            @if (Convert.ToString(loginclientId).ToUpper() == "CA3FE9ED-ED44-44BD-A11B-F6E7D77B7B88")
                            {
                                <tr>
                                    <td style="font-size:9px;font-family:Arial;font-weight:normal;text-align:left;">
                                        Банк
                                    </td>
                                    <td style="font-size:9px;font-family:arial;font-weight:normal;">
                                        <span>:&nbsp; @documentConfig.InvoiceBankName </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            }
        </tr>

        @if (Convert.ToString(loginclientId).ToUpper() == "5BC3566F-5AB2-478B-A930-495185515CA3")
        {
            <tr>
                <td style="vertical-align:top; padding-left:10px;">

                    <table class="gridspan4 acgridspan4">
                        <tbody>
                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                    1)
                                                </td>
                                                <td style="width:45%;font-family: Arial; font-size:11pt;font-weight:bold;text-decoration:underline;">
                                                    Online E-Banking Transfer
                                                </td>
                                                <td style="width:55%;font-family: Arial; font-size:11pt;font-weight:bold;text-decoration:underline;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;">
                                                    Reference Number
                                                </td>
                                                <td style="width:3%;font-family: Arial; font-size:11pt;">
                                                    :
                                                </td>
                                                <td style="width:7%;font-family: Arial; font-size:11pt;">
                                                    2001
                                                </td>
                                                <td style="width:45%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;">
                                                    Beneficiary Bank
                                                </td>
                                                <td style="width:3%;font-family: Arial; font-size:11pt;">
                                                    :
                                                </td>
                                                <td style="width:7%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                    DBS
                                                </td>
                                                <td style="width:45%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;">
                                                    Beneficiary Name
                                                </td>
                                                <td style="width:3%;font-family: Arial; font-size:11pt;">
                                                    :
                                                </td>
                                                <td style="width:30%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                    BOXPARK PTE LTD
                                                </td>
                                                <td style="width:22%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;">
                                                    Account No.
                                                </td>
                                                <td style="width:3%;font-family: Arial; font-size:11pt;">
                                                    :
                                                </td>
                                                <td style="width:45%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                    Current Account - 017-904405-7
                                                </td>
                                                <td style="width:7%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>


                            <tr style="font-family: Arial; font-size:10pt; margin-top:10px;">
                                <td>
                                    <table style="width:100%;margin-top:10px;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                    2)
                                                </td>
                                                <td style="width:70%;font-family: Arial; font-size:11pt;">
                                                    <span style="font-weight:bold;text-decoration:underline;">PAYNOW (NEW!)</span> to BOXPARK PTE. LTD via UEN No.
                                                </td>
                                                <td style="width:25%;font-family: Arial; font-size:11pt;font-weight:bold;text-decoration:underline;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;">
                                                    UEN No.
                                                </td>
                                                <td style="width:3%;font-family: Arial; font-size:11pt;">
                                                    :
                                                </td>
                                                <td style="width:30%;font-family: Arial; font-size:11pt;">
                                                    201100612H
                                                </td>
                                                <td style="width:28%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;">
                                                    Reference Number
                                                </td>
                                                <td style="width:3%;font-family: Arial; font-size:11pt;">
                                                    :
                                                </td>
                                                <td style="width:7%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                    2001
                                                </td>
                                                <td style="width:45%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;margin-top:10px;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>

                                                <td style="width:28%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                    <img src="https://6storage.s3-us-west-2.amazonaws.com/Images/q-r-codes.png" class="img-fluid" alt="QR-Code">
                                                </td>

                                                <td style="width:70%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>


                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>


                            <tr style="font-family: Arial; font-size:10pt; margin-top:10px;">
                                <td>
                                    <table style="width:100%;margin-top:10px;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                    3)
                                                </td>
                                                <td style="width:95%;font-family: Arial; font-size:11pt;">
                                                    <span style="font-weight:bold;text-decoration:underline;">Cheque</span> written to  <span style="font-weight:bold;text-decoration:underline;"> BOXPARK PTE LTD</span>
                                                </td>

                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;">
                                                    Reference Number
                                                </td>
                                                <td style="width:3%;font-family: Arial; font-size:11pt;">
                                                    :
                                                </td>
                                                <td style="width:7%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                    2001
                                                </td>
                                                <td style="width:45%;font-family: Arial; font-size:11pt;font-weight:bold;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;margin-top:10px;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                    4)
                                                </td>
                                                <td style="width:40%;font-family: Arial; font-size:11pt;text-decoration:underline;">
                                                    Cash or NETS
                                                </td>
                                                <td style="width:55%;font-family: Arial; font-size:11pt;font-weight:bold;text-decoration:underline;">
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;margin-top:10px;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                    5)
                                                </td>
                                                <td style="width:95%;font-family: Arial; font-size:11pt;">
                                                    <span style="text-decoration:underline;">Visa / Mastercard</span> <span style="color:red;"> <i>(not valid in conjunction with any promotions/ discounts or payment plans)</i></span>
                                                </td>

                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;margin-top:10px;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                    6)
                                                </td>
                                                <td style="width:95%;font-family: Arial; font-size:11pt;">
                                                    <span style="text-decoration:underline;">Website Online Payment Services</span> <span style="color:red;"> <i>(not valid in conjunction with any promotions/ discounts or payment plans)</i></span>
                                                </td>

                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                            <tr style="font-family: Arial; font-size:10pt;">
                                <td>
                                    <table style="width:100%;">
                                        <tbody>
                                            <tr>
                                                <td style="width:5%;text-align:left ;font-family: Arial; font-size:10.5pt;">
                                                </td>
                                                <td style="width:95%;font-family: Arial; font-size:11pt;">
                                                    <span style="font-weight:bold;">>>> www.boxpark.com.sg >>> E-SERVICES >>> Pay Online</span>
                                                </td>

                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>

                        </tbody>
                    </table>


                </td>
            </tr>
        }
        <tr>
            @if (displayNoteAtLast == true)
            {
                if (Model.GetDictionaryVisibleStatus( "DisplayNoteForInvoice"))
                {
                    var htmlContent = Model.GetDictionaryItem( "DisplayNoteForInvoice");
                    <td>
                        @Html.Raw(htmlContent)
                    </td>


                }
            }
        </tr>
    </table>

    @if (Model.GetDictionaryVisibleStatus( "DisplayAddPaymentLink"))
    {
        <div style="text-align:center;margin-top:50px;">
            @if (Convert.ToString(loginclientId).ToLower() == "ca8ed453-df4f-45c3-846e-4935207df331")
            {
                <a target="_blank" rel="noreferrer" href="https://www.superstorage.cz/sign-in/" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else if (Convert.ToString(loginclientId).ToUpper() == "BBA82ECD-E333-4479-86AF-7B22CFF0FDCF")
            {
                <a class="btn btn-info" target="_blank" rel="noreferrer" href="https://secureclient.6storage.com/login/bba82ecd-e333-4479-86af-7b22cff0fdcf " style="font-size:16px;font-weight:700;">Login</a>
                <a class="btn btn-success" target="_blank" rel="noreferrer" href="https://www.fygaro.com/en/pb/681c9091-daf6-4e60-9580-11b90e6ae50f/" style="font-size:16px;font-weight:700;margin-left: 10pt;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else if (Convert.ToString(loginclientId).ToUpper() == "98691828-40B3-4B0D-AC4A-DA93C7FE4F01")   //Merx Storage V2 client
            {
                <a target="_blank" rel="noreferrer" href="https://merxstorage.graphicode.website/sign-in/" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else if (Convert.ToString(loginclientId).ToUpper() == "45E06FB3-526A-49FD-ACC1-41EF12836365")   //Balearic Box V2 client
            {
                <a target="_blank" rel="noreferrer" href="https://balearicbox.com/es/sign-in/" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else if (Convert.ToString(loginclientId).ToUpper() == "64B91811-BEC6-48EB-A449-09BE48034C1E")   //Columbia Worldwide Movers
            {
                <a target="_blank" rel="noreferrer" href="https://www.jccsmart.com/e-bill/15873029" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else if (objOverallConfigData.AccountSettingsTable4.IsActivateNewUI && !string.IsNullOrEmpty(objOverallConfigData.clientAppAndDocumentConfig.StorageWebsite))
            {
                <a target="_blank" rel="noreferrer" href="@objOverallConfigData.clientAppAndDocumentConfig.StorageWebsite" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else if (appEnvironment == "LOCAL")
            {
                <a target="_blank" rel="noreferrer" href="https://www.8storage.com/sbmulticlientcustomer/login/@loginclientId" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>

            }
            else if (appEnvironment == "STAGING")
            {
                <a target="_blank" rel="noreferrer" href="https://secureclient.8storage.com/login/@loginclientId" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else if (appEnvironment == "LIVE")
            {
                <a target="_blank" rel="noreferrer" href="https://secureclient.6storage.com/login/@loginclientId" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
            else
            {
                //todo
                <a target="_blank" rel="noreferrer" href="https://secureclient.6storage.com/login/@loginclientId" style="font-size:16px;font-weight:700;text-decoration:underline;">@Model.GetDictionaryItem( "DisplayAddPaymentLink")</a>
            }
        </div>
    }

    @if (Model.GetDictionaryVisibleStatus( "DisplayAddBarCode128"))
    {
        <div style="text-align:center;margin-top:50px;">
            @{
                string barcode_format = Model.GetDictionaryItem( "DisplayAddBarCode128");
                string barcode_text = Model.GetDictionaryItem( "BarCode128Text");
                string barcode_text_location = Model.GetDictionaryItem( "BarCode128TextLocation");
                if (barcode_format.Contains("@account_number"))
                {

                    string str_bank_account_number = "";
                    documentConfig.InvoiceAccountNumber = documentConfig.InvoiceAccountNumber ?? "";
                    for (int i = 0; i < documentConfig.InvoiceAccountNumber.Length; i++)
                    {
                        if (Char.IsDigit(documentConfig.InvoiceAccountNumber[i]))
                        {
                            str_bank_account_number += documentConfig.InvoiceAccountNumber[i];
                        }
                    }
                    if (str_bank_account_number.Length > 16)
                    {
                        str_bank_account_number = str_bank_account_number.Substring(0, 16);
                    }
                    else if (str_bank_account_number.Length < 16)
                    {
                        str_bank_account_number = str_bank_account_number.PadLeft(16, '0');
                    }
                    barcode_format = barcode_format.Replace("@account_number", str_bank_account_number);

                }
                //euros - 6
                if (barcode_format.Contains("@invoice_total_euros"))
                {
                    string strTotalValue = TotalValue.ToString("N", new System.Globalization.CultureInfo("en-US"));
                    strTotalValue = strTotalValue.Replace(",", "");
                    if (strTotalValue.Contains("."))
                    {
                        strTotalValue = strTotalValue.Substring(0, strTotalValue.IndexOf("."));
                    }
                    strTotalValue = strTotalValue.PadLeft(6, '0');
                    barcode_format = barcode_format.Replace("@invoice_total_euros", strTotalValue);
                }
                //cents - 2
                if (barcode_format.Contains("@invoice_total_cents"))
                {
                    string strTotalCentsValue = TotalValue.ToString("N", new System.Globalization.CultureInfo("en-US"));
                    strTotalCentsValue = strTotalCentsValue.Replace(",", "");
                    if (strTotalCentsValue.Contains("."))
                    {
                        strTotalCentsValue = strTotalCentsValue.Split('.')[1];
                    }
                    strTotalCentsValue = strTotalCentsValue.PadLeft(2, '0');
                    barcode_format = barcode_format.Replace("@invoice_total_cents", strTotalCentsValue);
                }
                //reference - 23

                string strReferenceFormat = "";
                int iReferenceMacrosCount = 0;
                string[] strReferenceArrays = barcode_format.Split('@');
                for (int i = 0; i < strReferenceArrays.Length; i++)
                {
                    if (strReferenceArrays[i].ToLower().StartsWith("reference"))
                    {
                        strReferenceFormat = strReferenceFormat + "@" + strReferenceArrays[i];
                        iReferenceMacrosCount++;
                    }
                    //   if (i == strReferenceArrays.Length - 1 && isContainsReference == true)
                    //  {
                    //      strReferenceFormat = strReferenceFormat + "@reference_str";
                    //  }
                }
                if (strReferenceFormat.Contains("@reference_year"))
                {
                    strReferenceFormat = strReferenceFormat.Replace("@reference_year", DateTime.Now.Year.ToString());
                }
                if (strReferenceFormat.Contains("@reference_tenant_id"))
                {
                    string strCleanTenantId = System.Text.RegularExpressions.Regex.Replace(Model.TenantId.ToString(), "[^0-9]", "");
                    int value = 0;

                    // Tries to parse the int, returns false on failure.
                    if (int.TryParse(strCleanTenantId.Trim(), out value))
                    {
                        strReferenceFormat = strReferenceFormat.Replace("@reference_tenant_id", value.ToString());
                    }
                }

                if (strReferenceFormat.Contains("@reference_invoice_number"))
                {
                    string strCleanInvoiceId = 
                        System.Text.RegularExpressions.Regex.Replace(Model.InvoiceDetail.ClientInvoiceNumber, "[^0-9]", "");
                    
                        int iCleanInvoiceId = 0;
                    int.TryParse(strCleanInvoiceId.Trim(), out iCleanInvoiceId);
                    // Tries to parse the int, returns false on failure.

                    strReferenceFormat = strReferenceFormat.Replace("@reference_invoice_number", iCleanInvoiceId.ToString());

                }
                double strReferenceFormatNumber = 0;

                double.TryParse(strReferenceFormat, out strReferenceFormatNumber);
                /*
                 // calculate reference checksum
                 // https://www.finanssiala.fi/wp-content/uploads/2021/03/Forming_a_Finnish_reference_number.pdf
                      1. All digits of the reference number are multiplied from right to left with the values 7, 3, 1,7, 3, 1….
                      2. The products are then summed up and the sum is subtracted from the following full ten.
                      3. The resulting difference is the checksum, the final digit in the reference number.
                      4. If the difference is 10, the checksum is 0.
                  */
                double ref_product_sum = 0;
                int ref_stem = 1;
                double tmp = 0;

                for (int i = strReferenceFormatNumber.ToString().Length - 1; i >= 0; i--)
                {
                    if (ref_stem > 3)
                    {
                        ref_stem = 1;
                    }
                    if (ref_stem == 1)
                    {
                        tmp = 0;
                        double.TryParse(strReferenceFormatNumber.ToString()[i].ToString(), out tmp);
                        ref_product_sum += tmp * 7;
                    }
                    else if (ref_stem == 2)
                    {
                        tmp = 0;
                        double.TryParse(strReferenceFormatNumber.ToString()[i].ToString(), out tmp);
                        ref_product_sum += tmp * 3;
                    }
                    else if (ref_stem == 3)
                    {
                        tmp = 0;
                        double.TryParse(strReferenceFormatNumber.ToString()[i].ToString(), out tmp);
                        ref_product_sum += tmp * 1;
                    }

                    ref_stem++;
                }

                double ref_reminder = ref_product_sum % 10;
                double ref_product_sum_div = ref_product_sum;
                
                if (ref_reminder < 5)
                {
                    ref_product_sum_div = ref_product_sum_div + 5;
                }
                
                double ref_product_sum_ten = Math.Round(ref_product_sum_div / 10, 0, MidpointRounding.AwayFromZero) * 10;
                ref_product_sum = ref_product_sum_ten - ref_product_sum;
                
                if (ref_product_sum == 10)
                {
                    ref_product_sum = 0;
                }

                strReferenceFormat = strReferenceFormat + ref_product_sum.ToString();
                strReferenceFormat = strReferenceFormat.PadLeft(20, '0');
                int iReferenceMacrosCount2 = 0;

                for (int i = 0; i < strReferenceArrays.Length; i++)
                {
                    if (strReferenceArrays[i].ToLower().StartsWith("reference"))
                    {
                        // strReferenceFormat = strReferenceFormat + "@" + strReferenceArrays[i];
                        iReferenceMacrosCount2++;
                        if (iReferenceMacrosCount2 == iReferenceMacrosCount)
                        {
                            barcode_format = barcode_format.Replace("@" + strReferenceArrays[i], "@reference_str");
                        }
                        else
                        {
                            barcode_format = barcode_format.Replace("@" + strReferenceArrays[i], "");
                        }
                    }
                }

                //reserve - 000
                barcode_format = barcode_format.Replace("@reference_str", "000" + strReferenceFormat);

                if (barcode_text.Contains("@reference_str"))
                {
                    barcode_text = barcode_text.Replace("@reference_str", strReferenceFormatNumber.ToString());
                }


                if (barcode_format.Contains("@due_date"))
                {
                    if (invoiceDueDate != "" && invoiceDueDate != "-")
                    {
                        barcode_format = barcode_format.Replace("@due_date", (Convert.ToDateTime(invoiceDueDate)).ToString("yyMMdd"));
                    }
                    else
                    {
                        barcode_format = barcode_format.Replace("@due_date", "");
                    }
                }

                Zen.Barcode.Code128BarcodeDraw barcode = Zen.Barcode.BarcodeDrawFactory.Code128WithChecksum;
                var barcodeImage = barcode.Draw(barcode_format, 90);


                var resultImage = new System.Drawing.Bitmap(barcodeImage.Width + 90, barcodeImage.Height + 90); // 20 is bottom padding, adjust to your text

                var graphics = System.Drawing.Graphics.FromImage(resultImage);
                var font = new System.Drawing.Font("Consolas", 12);
                var brush = new System.Drawing.SolidBrush(System.Drawing.Color.Black);
                var format = new System.Drawing.StringFormat();
                format.Alignment = System.Drawing.StringAlignment.Center;
                format.LineAlignment = System.Drawing.StringAlignment.Far;
                graphics.Clear(System.Drawing.Color.White);
                graphics.DrawImage(barcodeImage, 0, 0);
                if (barcode_text_location.ToLower() == "top")
                {
                    graphics.DrawString(barcode_text, font, brush, barcodeImage.Width / 2, 0, format);

                }
                else if (barcode_text_location.ToLower() == "left")
                {
                    graphics.DrawString(barcode_text, font, brush, 0, barcodeImage.Height / 2, format);
                }
                else if (barcode_text_location.ToLower() == "right")
                {
                    graphics.DrawString(barcode_text, font, brush, barcodeImage.Width + 40, barcodeImage.Height / 2, format);
                }
                else
                {
                    //draw at bottom
                    graphics.DrawString(barcode_text, font, brush, barcodeImage.Width / 2, barcodeImage.Height + 40, format);
                }

                // resultImage.Save("temp");
                MemoryStream ms = new MemoryStream();

                resultImage.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                byte[] barcode_image_bytes = ms.ToArray();
                string barcode_image_base64 = Convert.ToBase64String(barcode_image_bytes);
                @Html.Raw("<img id=\"barcode\" class=\"barcode\" src=\"data:image/png;base64," + barcode_image_base64 + "\" />");

                <div><span>Viitenumero @(Model.InvoiceDetail.InvoiceDate.Year + " " + Model.ClientInvoiceNumber + " " + (Model.TenantId ?? "").Replace("TEN" , "")) </span> </div>
                ms.Close();
                Array.Clear(barcode_image_bytes, 0, barcode_image_bytes.Length);
                /*  if (barcode_format.Contains("@check_digit"))
                  {
                      barcode_format = barcode_format.Replace("@check_digit","^^");
                      const int C_Code = 105;
                      int d, a = 1, sum = 0, product;
                      int checkSum = 0, checkDigit, x;
                      for (int i = 0; i <= (barcode_format.Length) - 2; i = i + 2)
                      {
                          d = Convert.ToInt32(barcode_format.Substring(i, 2));
                          product = a * d;
                          sum += product;
                          a++;
                      }
                      sum += C_Code;
                      checkSum = sum / 103;
                      x = checkSum * 103;
                      checkDigit = sum - x;
                      barcode_format = barcode_format.Replace("@check_digit", ((DateTime)Model.EstimatedTerminationDate).ToString("yyMMdd"));
                  }*/
            }

        </div>
    }

    @if (Model.GetDictionaryVisibleStatus( "DisplayQRCode") && !string.IsNullOrEmpty(Model.DocumentConfig.QRCodeimg))
    {
        <img src="@Html.Raw(documentConfig.QRCodeimg)" alt="" style="height:150px;width:150px" />
        <br />
    }

    @{
        var borderCss = "1px solid #fff";
        if (!string.IsNullOrEmpty(documentConfig.InvoiceFooterText1) && !string.IsNullOrEmpty(documentConfig.InvoiceFooterText2))
        {
            borderCss = "1px solid #ddd";
        }
    }


    @if (Convert.ToString(loginclientId).ToUpper() == "8F52ACD3-1BD5-48D3-916D-BC59B3046F52")
    {
        <div id="footer">
            <table>
                <tr style="border:@borderCss;" id="ftr-txt">
                    <td colspan="6" style="border:@borderCss;text-align:center;font-family:arial;font-size:8px;">
                        @if (Convert.ToString(loginclientId).ToUpper() == "8F52ACD3-1BD5-48D3-916D-BC59B3046F52")
                        {
                            <span style="width:100%;display:inline-block">
                                بثلثصللص
                            </span>
                        }

                    </td>
                </tr>
            </table>
        </div>

    }
    else
    {
        <div id="footer" style="@pdfdisplay">
            <table>
                <tr style="border:@borderCss;" id="ftr-txt">
                    <td colspan="6" style="border:@borderCss;text-align:center;font-family:arial;font-size:8px;">
                        <span id="remove-brk" style="width:100%;display:inline-block">
                            @documentConfig.InvoiceFooterText1
                        </span><br />
                        @if (!string.IsNullOrEmpty(documentConfig.InvoiceFooterText2))
                        {
                            if (documentConfig.InvoiceFooterText2.Contains("^"))
                            {
                                var footer2 = documentConfig.InvoiceFooterText2.Split('^');

                                foreach (var ftText in footer2)
                                {
                                    <span style="width:100%;display:inline-block">
                                        @ftText
                                    </span><br />
                                }
                            }
                            else
                            {
                                <span style="width:100%;display:inline-block">
                                    @documentConfig.InvoiceFooterText2
                                </span>
                            }
                        }
                        @if (Convert.ToString(loginclientId).ToLower() == "67810ef0-6518-43e4-b9df-5e28730321b8")   //By Prasanth Komora - Location and address update
                        {
                            <span style="width:100%;display:inline-block">
                                Storage #31: Mashynobudivna st, 41
                            </span>
                        }
                    </td>
                </tr>
                <tr hidden>
                    @*Hidden by prakash during multiple tax sprint 30 on 11-04-2019, print window displaying export button. *@
                    <td colspan="5" class="alignRight">
                        @*<button id="printbtn" class="btn btn-u sm-margin-bottom-10" onclick="PrintingInvoiceHtmlToPDF()" style="@pdfdisplay"><i class="fa fa-print"></i> Print</button>*@

                        <input type="button" id="btnPDFExportReportSearch" value="Export PDF" class="btn  btn-success" style="@exportdisplay" tabindex="9" onclick="ExportInvoiceHtmlToPDF()" />
                    </td>
                </tr>
            </table>
        </div>
    }
</div>